{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to aeon.wiki The wiki is sub divided into several categories. Each category holds a number of documentation pages. Tutorial Getting Started, Basic Examples, FAQ Documentation Wallet CLI, Wallet RPC, aeond The project Bug Report, Code of conduct, Dependencies, Donate, Features, History, Install, Known Bugs, Releases, TODO, Web Site Info Network info Block explorer, charts Who and why Companies, Copyright, Sponsors, Thanks, The Name","title":"Introduction"},{"location":"#welcome-to-aeonwiki","text":"The wiki is sub divided into several categories. Each category holds a number of documentation pages. Tutorial Getting Started, Basic Examples, FAQ Documentation Wallet CLI, Wallet RPC, aeond The project Bug Report, Code of conduct, Dependencies, Donate, Features, History, Install, Known Bugs, Releases, TODO, Web Site Info Network info Block explorer, charts Who and why Companies, Copyright, Sponsors, Thanks, The Name","title":"Welcome to aeon.wiki"},{"location":"#_1","text":"","title":""},{"location":"documentation/aeond/commands/","text":"aeond Usage ./aeond [options] [commands] Description This is the command line Aeon peer-to-peer node. It is a tool to manage network connections. Commands alt_chain_info alt_chain_info [<block_hash>] Displays alternate competing blockchains and the height at which they differ. >>> alt_chain_info 1 alternate chains found: 1 blocks long, from height 1264997 (5502 deep), diff 1746032035727893: 57519747c6f430928b39aaab4f68515640b219401ed3f8ce147ceadb1ce21e73 ban ban <IP> [<seconds>] Ban a given IP for a given amount of seconds. Omit the seconds to ban indefinitely. >>> ban 127.0.0.1 bans bans Show the currently banned IPs. bc_dyn_stats bc_dyn_stats <number_of_blocks> Prints various network related info for the previous <number_of_blocks> blocks. >>> bc_dyn_stats 60 Height: 1286123, diff 2948360170310179, cum. diff 227859514661806772567, target 240 sec Last 60: avg. diff 2966851099331183, 219 avg sec/block, avg num txes 0.533333, avg. reward 2.926493333333, median block weight 255 Block versions: 60 v9 Voting for: 60 v9 diff diff Prints the following mining related information at the present moment: pending block height (BH), highest confirmed block hash (TH), network difficulty (DIFF), and estimated network hashrate (HR). >>> diff BH: 1286123, TH: 5852f84187a1c3a2bb457c8335fba70ce1f608cb835431e3372f07104aef51fb, DIFF: 2948360170310179, HR: 12284834042959 H/s exit exit Stops the daemon process. flush_txpool flush_txpool [<tx_id>] Removes transactions from the pending transaction pool. >>> flush_txpool Pool successfully flushed hard_fork_info hard_fork_info Prints information related to hardfork version numbers and what version miners are mining on. >>> hard_fork_info version 9 enabled, 10039/10080 votes, threshold 0 current version 9, voting for version 9 help help [<cmd>] Prints the various commands and their usages. >>> help exit Command usage: exit Command description: Stop the daemon. hide_hr hide_hr When mining and hashrate logging is enabled, this can be used to disable the logging print out. >>> hide_hr Hash rate logging is off in_peers in_peers <max_number> Set the <max_number> of peers your daemon has incoming connections with. >>> in_peers 50 Max number of in peers set to 50 is_key_image_spent is_key_image_spent <key_image> Print whether a given key image is in the spent key images set. >>> is_key_image_spent 74336412b9707f51cbb8db6b0f7b64c0b79ded67d7daad567368a37d35a5019e <74336412b9707f51cbb8db6b0f7b64c0b79ded67d7daad567368a37d35a5019e>: spent limit limit [<kB/s>] Get or set the download and upload limit. >>> limit limit-down is 8192 kB/s limit-up is 2048 kB/s >>> limit 8192 Set limit-down to 8192 kB/s Set limit-up to 8192 kB/s limit_down limit_down [<kB/s>] Get or set the download limit. >>> limit_down limit-down is 8192 kB/s >>> limit_down 2048 Set limit-down to 2048 kB/s limit_up limit_up [<kB/s>] Get or set the upload limit. >>> limit_up limit_up is 8192 kB/s >>> limit_up 2048 Set limit_up to 2048 kB/s out_peers out_peers <max_number> Set the <max_number> of peers your daemon has outgoing connections with. >>> out_peers 50 Max number of out peers set to 50 output_histogram output_histogram ([@<amount>]|[<lower_bound> [<upper_bound>]]) Print the output histogram of transaction outputs. The first column is the frequency of the output and the second column is the amount in aeon. >>> output_histogram 500000 570813 1.000000000000 807641 0.500000000000 891168 10.000000000000 >>> output_histogram @400000000000 376944 0.400000000000 print_bc print_bc <begin_height> [<end_height>] Print the blockchain info in a given blocks range. >>> print_bc 100 103 height: 100, timestamp: 1402081081, size: 310, weight: 310 (long term 310), transactions: 0 major version: 1, minor version: 0 block id: 6dd13aaab16679f49ee6b2b75c7dc99b1fd09ab2282b18cb4b55b73110655742, previous block id: b81ad1606a80d2e29fe2cf7b1a3dbd232614cf73f50036b0f4eee35d83eb12c9 difficulty: 2104944, nonce 2648661871, reward 17.590508402013 height: 101, timestamp: 1402081079, size: 346, weight: 346 (long term 346), transactions: 0 major version: 1, minor version: 0 block id: df3a804ec1164436f875816e6936ddb75e592bee86a9aeca46b5a144ae0a00e8, previous block id: 6dd13aaab16679f49ee6b2b75c7dc99b1fd09ab2282b18cb4b55b73110655742 difficulty: 2108005, nonce 1955249155, reward 17.590491626397 height: 102, timestamp: 1402081110, size: 347, weight: 347 (long term 347), transactions: 0 major version: 1, minor version: 0 block id: 35908ffaef2fa8b54f81778df495ab2bfecc6a346575c9eecb95b939f00ed570, previous block id: df3a804ec1164436f875816e6936ddb75e592bee86a9aeca46b5a144ae0a00e8 difficulty: 2144783, nonce 800540195, reward 17.590474850797 height: 103, timestamp: 1402081172, size: 347, weight: 347 (long term 347), transactions: 0 major version: 1, minor version: 0 block id: 62fd2e1c1c7e6a2fceba8e76f8f81178c0e5cba936bc46525af2a6d0c784f040, previous block id: 35908ffaef2fa8b54f81778df495ab2bfecc6a346575c9eecb95b939f00ed570 difficulty: 2163955, nonce 1954583209, reward 17.590458075213 print_block print_block <block_number> Prints raw information about a given block. >>> print_block 100 timestamp: 1402081081 previous hash: b81ad1606a80d2e29fe2cf7b1a3dbd232614cf73f50036b0f4eee35d83eb12c9 nonce: 2648661871 is orphan: 0 height: 100 depth: 1286027 hash: 6dd13aaab16679f49ee6b2b75c7dc99b1fd09ab2282b18cb4b55b73110655742 difficulty: 2104944 POW hash: 5105c0d305fa2db326330c583647762fc76e3f08c820b55a9d0921d4de050000 block size: 310 block weight: 310 long term weight: 310 num txes: 0 reward: 17.590508402013 { \"major_version\": 1, \"minor_version\": 0, \"timestamp\": 1402081081, \"prev_id\": \"b81ad1606a80d2e29fe2cf7b1a3dbd232614cf73f50036b0f4eee35d83eb12c9\", \"nonce\": 2648661871, \"miner_tx\": { \"version\": 1, \"unlock_time\": 160, \"vin\": [ { \"gen\": { \"height\": 100 } } ], \"vout\": [ { \"amount\": 402013, \"target\": { \"key\": \"81ce0f45c10bce3d6ff85fc318933cbe6e456f80891ccf410b3b0c26f8abf45d\" } }, { \"amount\": 8000000, \"target\": { \"key\": \"f6ba955736ec1d6a603c26fc39624ecc6814201de1e9bd76cb40237df97a9d74\" } }, { \"amount\": 500000000, \"target\": { \"key\": \"18a7eeeb235fecbead4cdc47e017cbe560934c605a7b5696673bb255c5932015\" } }, { \"amount\": 90000000000, \"target\": { \"key\": \"e4a881761a5a3b3aa83eabe329f97a3918fe0d3045a0af58bb260cb9677f62d6\" } }, { \"amount\": 500000000000, \"target\": { \"key\": \"ba3c12abe756f9294e11170a154a15798505baeebdf4f1f1ae2240cc4140d4ce\" } }, { \"amount\": 7000000000000, \"target\": { \"key\": \"4965688f9fe2d925785f9a77177a11aa15f81aa47fd2ffa443bb528161760db7\" } }, { \"amount\": 10000000000000, \"target\": { \"key\": \"ddccdd7016d44335525a98729c685b9abb78ebc5f409591426b965f9a54d52b4\" } } ], \"extra\": [ 1, 211, 183, 59, 244, 246, 74, 155, 242, 110, 74, 9, 6, 164, 186, 214, 213, 16, 85, 232, 90, 205, 30, 158, 37, 243, 123, 55, 171, 145, 3, 33, 194 ], \"signatures\": [ ] }, \"tx_hashes\": [ ] } print_cn print_cn Shows peer connection information. >>> print_cn Remote Host Peer id Support Flags Recv/Sent (inactive,sec) State Livetime(sec) Down (kB/s) Down(now) Up (kB/s) Up(now) OUT xxx.xxx.xxx.xxx:11180 a619756425250d4e 1 24441(97)/1033(8) normal 98 0 2 0 0 OUT xxx.xxx.xxx.xxx:11180 82fce994b2232ba7 1 25102(8)/1654(10) normal 99 0 0 0 0 OUT xxx.xxx.xxx.xxx:20111 574b999fa8fc68c3 1 8702(8)/2165(8) normal 99 0 0 0 0 print_coinbase_tx_sum print_coinbase_tx_sum <start_height> <block_count> Print the sum of coinbase transactions. >>> print_coinbase_tx_sum 100 3 Sum of coinbase transactions between block heights [100, 103) is 52.771474879207 consisting of 52.771474879207 in emissions, and 0.000000000000 in fees print_height print_height Prints the total number of mined blocks. >>> print_height 1286130 print_pl print_pl Peer list historical information. Column headers are: white/gray peer|Peer ID|IP address|elapsed time since last seen . White peers are online and reachable and grey peers are offline. >>> print_pl ... white ef7e60xxxxxxx881 xxx.110.xxx.146:11180 d79.h0.m22.s20 white 9eae3xxxx3b32ed4 xxx.63.xxx.22:11180 d79.h7.m38.s6 white ad9xxxxxxfe6a73e xxx.45.xxx.241:32404 d79.h9.m11.s29 white 70da0187xxxx7656 xxx.142.xxx.104:11180 d79.h15.m37.s36 gray 2ddac6xxxx8cc587 xxx.201.xxx.248:11180 d0.h0.m4.s59 gray 9125218xxxx065bd xxx.145.xxx.4:11180 d0.h1.m36.s6 gray e40da7xxxx21f7b1 xxx.126.xxx.94:11180 d1.h3.m40.s2 gray d6b4738bxxxx3c7f xxx.160.xxx.83:11180 d1.h13.m34.s25 ... print_pl_stats print_pl_stats Print peer list counts and limits. >>> print_pl_stats White list size: 235/1000 (23.5%) Gray list size: 486/5000 (9.72%) print_pool print_pool Print the transaction pool using a long format. print_pool_sh print_pool_sh Print transaction pool using a short format. print_pool_stats print_pool_stats Print various transaction pool information. >>> print_pool_stats 0 tx(es), 0 bytes total (min 0, max 0, avg 0, median 0) fees 0.000000000000 (avg 0.000000000000 per tx, 0.000000000000 per byte) 0 double spends, 0 not relayed, 0 failing, 0 older than 10 minutes (oldest -), no backlo print_status print_status status for non-interactive mode. print_tx print_tx <tx_hash> [+hex] [+json] Find a transaction by hash and show information using +hex or +json . >>> print_tx 0b3aef5340883a313522df41a6534ce05c43c62abfb8861b804727dfd89d57c6 +hex +json Found in blockchain at height 1286136 01b4c04e01fff8bf4e058090bcfd02028bc55b44ca98800e93fc2aae1fce11cc37c8be36940d1fa2d85c3d7f03e156b8808cee891a029c4a1ed54864faf461feef6677e246de5b13a2b17aa3d34c3a477894c091569b80d88ee16f025cd087417aa17ccd4b8baead77780ed9b9132c4875480a0f012c4553ddff96418080dd9da41702116cb270c89667ee374011fb77bc0af813e9fed7e41db91c0d938a06087dff5280c0a8ca9a3a02a50b58d5ff5c87b1d87ad6d5af31b3975251b77751b4898b1c51e1ab58fc5d7634011a83442004f6ce96d32ff3129d721d9bdcc790164c3801b0285deec44f47e91e02110000000306d0ef9f000000000000000000 { \"version\": 1, \"unlock_time\": 1286196, \"vin\": [ { \"gen\": { \"height\": 1286136 } } ], \"vout\": [ { \"amount\": 800000000, \"target\": { \"key\": \"8bc55b44ca98800e93fc2aae1fce11cc37c8be36940d1fa2d85c3d7f03e156b8\" } }, { \"amount\": 7000000000, \"target\": { \"key\": \"9c4a1ed54864faf461feef6677e246de5b13a2b17aa3d34c3a477894c091569b\" } }, { \"amount\": 30000000000, \"target\": { \"key\": \"5cd087417aa17ccd4b8baead77780ed9b9132c4875480a0f012c4553ddff9641\" } }, { \"amount\": 800000000000, \"target\": { \"key\": \"116cb270c89667ee374011fb77bc0af813e9fed7e41db91c0d938a06087dff52\" } }, { \"amount\": 2000000000000, \"target\": { \"key\": \"a50b58d5ff5c87b1d87ad6d5af31b3975251b77751b4898b1c51e1ab58fc5d76\" } } ], \"extra\": [ 1, 26, 131, 68, 32, 4, 246, 206, 150, 211, 47, 243, 18, 157, 114, 29, 155, 220, 199, 144, 22, 76, 56, 1, 176, 40, 93, 238, 196, 79, 71, 233, 30, 2, 17, 0, 0, 0, 3, 6, 208, 239, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], \"signatures\": [ ] } relay_tx relay_tx <txid> Relay a transaction based on its id. save save Save the blockchain. >>> save Blockchain saved set_log set_log <level>|<{+,-,}categories> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE . Each of the higher log levels contains the log levels below them. So for example set_log 3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example set_log net.p2p:INFO . This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels. >>> set_log net.p2p:TRACE Log categories are now net.p2p:TRACE 2020-11-29 17:08:11.624 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:177 2020-11-29 17:08:11.625 [P2P0] INFO net.p2p src/p2p/net_node.inl:941 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1140 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1122 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1137 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:925 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:169 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:177 2020-11-29 17:08:16.626 [P2P0] INFO net.p2p src/p2p/net_node.inl:941 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1140 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1122 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1137 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:925 2020-11-29 17:08:16.627 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:169 >>> set_log net.p2p:NONE Log categories are now net.p2p:NONE show_hr show_hr If mining, hashrate info will begin to be printed to the console at a regular interval. >>> show_hr Hash rate logging is on hashrate: 321685.937540986 start_mining start_mining <addr> [<threads>] Spawns mining process. >>> start_mining WmtFPiaD2d4gM2TbrU1vYdZABqoVzYBicGPfXfSRMY2QYWRscJPDPDy67y1oiU3CYNhXCnKwn6aDpVGuX2nqcp5D1HWr2N7mg 1 2020-11-29 15:18:26.411 7f65467fc700 WARN miner src/cryptonote_basic/miner.cpp:325 Mining has started with 1 threads, good luck! 2020-11-29 15:18:26.411 [miner 0] INFO global src/cryptonote_basic/miner.cpp:441 Miner thread was started [0] status status Prints various network related information. >>> status Height: 1286128/1286128 (100.0%) on mainnet, not mining, net hash 12.23 TH/s, v9, 0(out)+0(in) connections, uptime 0d 0h 1m 9s stop_daemon stop_daemon Stops the daemon process. stop_mining stop_mining Halts the mining process. >>> stop_mining 2020-11-29 15:41:12.639 [miner 0] INFO global src/cryptonote_basic/miner.cpp:510 Miner thread stopped [0] Mining stopped sync_info sync_info Prints network sychronization information. >>> sync_info Height: 1286139, target: 1286139 (100%) Downloading at 0 kB/s 1 peers 168.119.38.182:49802 22591ed177acf57b normal 1286139 0 kB/s, 0 blocks / 0 MB queued 0 spans, 0 MB unban unban <IP> Unban a given IP. >>> unban 127.0.0.1 version version Print the software version you are using. >>> version Aeon 'Chronos' (v0.14.1.0-release)","title":"Commands"},{"location":"documentation/aeond/commands/#aeond","text":"","title":"aeond"},{"location":"documentation/aeond/commands/#usage","text":"./aeond [options] [commands]","title":"Usage"},{"location":"documentation/aeond/commands/#description","text":"This is the command line Aeon peer-to-peer node. It is a tool to manage network connections.","title":"Description"},{"location":"documentation/aeond/commands/#commands","text":"","title":"Commands"},{"location":"documentation/aeond/commands/#alt_chain_info","text":"alt_chain_info [<block_hash>] Displays alternate competing blockchains and the height at which they differ. >>> alt_chain_info 1 alternate chains found: 1 blocks long, from height 1264997 (5502 deep), diff 1746032035727893: 57519747c6f430928b39aaab4f68515640b219401ed3f8ce147ceadb1ce21e73","title":"alt_chain_info"},{"location":"documentation/aeond/commands/#ban","text":"ban <IP> [<seconds>] Ban a given IP for a given amount of seconds. Omit the seconds to ban indefinitely. >>> ban 127.0.0.1","title":"ban"},{"location":"documentation/aeond/commands/#bans","text":"bans Show the currently banned IPs.","title":"bans"},{"location":"documentation/aeond/commands/#bc_dyn_stats","text":"bc_dyn_stats <number_of_blocks> Prints various network related info for the previous <number_of_blocks> blocks. >>> bc_dyn_stats 60 Height: 1286123, diff 2948360170310179, cum. diff 227859514661806772567, target 240 sec Last 60: avg. diff 2966851099331183, 219 avg sec/block, avg num txes 0.533333, avg. reward 2.926493333333, median block weight 255 Block versions: 60 v9 Voting for: 60 v9","title":"bc_dyn_stats"},{"location":"documentation/aeond/commands/#diff","text":"diff Prints the following mining related information at the present moment: pending block height (BH), highest confirmed block hash (TH), network difficulty (DIFF), and estimated network hashrate (HR). >>> diff BH: 1286123, TH: 5852f84187a1c3a2bb457c8335fba70ce1f608cb835431e3372f07104aef51fb, DIFF: 2948360170310179, HR: 12284834042959 H/s","title":"diff"},{"location":"documentation/aeond/commands/#exit","text":"exit Stops the daemon process.","title":"exit"},{"location":"documentation/aeond/commands/#flush_txpool","text":"flush_txpool [<tx_id>] Removes transactions from the pending transaction pool. >>> flush_txpool Pool successfully flushed","title":"flush_txpool"},{"location":"documentation/aeond/commands/#hard_fork_info","text":"hard_fork_info Prints information related to hardfork version numbers and what version miners are mining on. >>> hard_fork_info version 9 enabled, 10039/10080 votes, threshold 0 current version 9, voting for version 9","title":"hard_fork_info"},{"location":"documentation/aeond/commands/#help","text":"help [<cmd>] Prints the various commands and their usages. >>> help exit Command usage: exit Command description: Stop the daemon.","title":"help"},{"location":"documentation/aeond/commands/#hide_hr","text":"hide_hr When mining and hashrate logging is enabled, this can be used to disable the logging print out. >>> hide_hr Hash rate logging is off","title":"hide_hr"},{"location":"documentation/aeond/commands/#in_peers","text":"in_peers <max_number> Set the <max_number> of peers your daemon has incoming connections with. >>> in_peers 50 Max number of in peers set to 50","title":"in_peers"},{"location":"documentation/aeond/commands/#is_key_image_spent","text":"is_key_image_spent <key_image> Print whether a given key image is in the spent key images set. >>> is_key_image_spent 74336412b9707f51cbb8db6b0f7b64c0b79ded67d7daad567368a37d35a5019e <74336412b9707f51cbb8db6b0f7b64c0b79ded67d7daad567368a37d35a5019e>: spent","title":"is_key_image_spent"},{"location":"documentation/aeond/commands/#limit","text":"limit [<kB/s>] Get or set the download and upload limit. >>> limit limit-down is 8192 kB/s limit-up is 2048 kB/s >>> limit 8192 Set limit-down to 8192 kB/s Set limit-up to 8192 kB/s","title":"limit"},{"location":"documentation/aeond/commands/#limit_down","text":"limit_down [<kB/s>] Get or set the download limit. >>> limit_down limit-down is 8192 kB/s >>> limit_down 2048 Set limit-down to 2048 kB/s","title":"limit_down"},{"location":"documentation/aeond/commands/#limit_up","text":"limit_up [<kB/s>] Get or set the upload limit. >>> limit_up limit_up is 8192 kB/s >>> limit_up 2048 Set limit_up to 2048 kB/s","title":"limit_up"},{"location":"documentation/aeond/commands/#out_peers","text":"out_peers <max_number> Set the <max_number> of peers your daemon has outgoing connections with. >>> out_peers 50 Max number of out peers set to 50","title":"out_peers"},{"location":"documentation/aeond/commands/#output_histogram","text":"output_histogram ([@<amount>]|[<lower_bound> [<upper_bound>]]) Print the output histogram of transaction outputs. The first column is the frequency of the output and the second column is the amount in aeon. >>> output_histogram 500000 570813 1.000000000000 807641 0.500000000000 891168 10.000000000000 >>> output_histogram @400000000000 376944 0.400000000000","title":"output_histogram"},{"location":"documentation/aeond/commands/#print_bc","text":"print_bc <begin_height> [<end_height>] Print the blockchain info in a given blocks range. >>> print_bc 100 103 height: 100, timestamp: 1402081081, size: 310, weight: 310 (long term 310), transactions: 0 major version: 1, minor version: 0 block id: 6dd13aaab16679f49ee6b2b75c7dc99b1fd09ab2282b18cb4b55b73110655742, previous block id: b81ad1606a80d2e29fe2cf7b1a3dbd232614cf73f50036b0f4eee35d83eb12c9 difficulty: 2104944, nonce 2648661871, reward 17.590508402013 height: 101, timestamp: 1402081079, size: 346, weight: 346 (long term 346), transactions: 0 major version: 1, minor version: 0 block id: df3a804ec1164436f875816e6936ddb75e592bee86a9aeca46b5a144ae0a00e8, previous block id: 6dd13aaab16679f49ee6b2b75c7dc99b1fd09ab2282b18cb4b55b73110655742 difficulty: 2108005, nonce 1955249155, reward 17.590491626397 height: 102, timestamp: 1402081110, size: 347, weight: 347 (long term 347), transactions: 0 major version: 1, minor version: 0 block id: 35908ffaef2fa8b54f81778df495ab2bfecc6a346575c9eecb95b939f00ed570, previous block id: df3a804ec1164436f875816e6936ddb75e592bee86a9aeca46b5a144ae0a00e8 difficulty: 2144783, nonce 800540195, reward 17.590474850797 height: 103, timestamp: 1402081172, size: 347, weight: 347 (long term 347), transactions: 0 major version: 1, minor version: 0 block id: 62fd2e1c1c7e6a2fceba8e76f8f81178c0e5cba936bc46525af2a6d0c784f040, previous block id: 35908ffaef2fa8b54f81778df495ab2bfecc6a346575c9eecb95b939f00ed570 difficulty: 2163955, nonce 1954583209, reward 17.590458075213","title":"print_bc"},{"location":"documentation/aeond/commands/#print_block","text":"print_block <block_number> Prints raw information about a given block. >>> print_block 100 timestamp: 1402081081 previous hash: b81ad1606a80d2e29fe2cf7b1a3dbd232614cf73f50036b0f4eee35d83eb12c9 nonce: 2648661871 is orphan: 0 height: 100 depth: 1286027 hash: 6dd13aaab16679f49ee6b2b75c7dc99b1fd09ab2282b18cb4b55b73110655742 difficulty: 2104944 POW hash: 5105c0d305fa2db326330c583647762fc76e3f08c820b55a9d0921d4de050000 block size: 310 block weight: 310 long term weight: 310 num txes: 0 reward: 17.590508402013 { \"major_version\": 1, \"minor_version\": 0, \"timestamp\": 1402081081, \"prev_id\": \"b81ad1606a80d2e29fe2cf7b1a3dbd232614cf73f50036b0f4eee35d83eb12c9\", \"nonce\": 2648661871, \"miner_tx\": { \"version\": 1, \"unlock_time\": 160, \"vin\": [ { \"gen\": { \"height\": 100 } } ], \"vout\": [ { \"amount\": 402013, \"target\": { \"key\": \"81ce0f45c10bce3d6ff85fc318933cbe6e456f80891ccf410b3b0c26f8abf45d\" } }, { \"amount\": 8000000, \"target\": { \"key\": \"f6ba955736ec1d6a603c26fc39624ecc6814201de1e9bd76cb40237df97a9d74\" } }, { \"amount\": 500000000, \"target\": { \"key\": \"18a7eeeb235fecbead4cdc47e017cbe560934c605a7b5696673bb255c5932015\" } }, { \"amount\": 90000000000, \"target\": { \"key\": \"e4a881761a5a3b3aa83eabe329f97a3918fe0d3045a0af58bb260cb9677f62d6\" } }, { \"amount\": 500000000000, \"target\": { \"key\": \"ba3c12abe756f9294e11170a154a15798505baeebdf4f1f1ae2240cc4140d4ce\" } }, { \"amount\": 7000000000000, \"target\": { \"key\": \"4965688f9fe2d925785f9a77177a11aa15f81aa47fd2ffa443bb528161760db7\" } }, { \"amount\": 10000000000000, \"target\": { \"key\": \"ddccdd7016d44335525a98729c685b9abb78ebc5f409591426b965f9a54d52b4\" } } ], \"extra\": [ 1, 211, 183, 59, 244, 246, 74, 155, 242, 110, 74, 9, 6, 164, 186, 214, 213, 16, 85, 232, 90, 205, 30, 158, 37, 243, 123, 55, 171, 145, 3, 33, 194 ], \"signatures\": [ ] }, \"tx_hashes\": [ ] }","title":"print_block"},{"location":"documentation/aeond/commands/#print_cn","text":"print_cn Shows peer connection information. >>> print_cn Remote Host Peer id Support Flags Recv/Sent (inactive,sec) State Livetime(sec) Down (kB/s) Down(now) Up (kB/s) Up(now) OUT xxx.xxx.xxx.xxx:11180 a619756425250d4e 1 24441(97)/1033(8) normal 98 0 2 0 0 OUT xxx.xxx.xxx.xxx:11180 82fce994b2232ba7 1 25102(8)/1654(10) normal 99 0 0 0 0 OUT xxx.xxx.xxx.xxx:20111 574b999fa8fc68c3 1 8702(8)/2165(8) normal 99 0 0 0 0","title":"print_cn"},{"location":"documentation/aeond/commands/#print_coinbase_tx_sum","text":"print_coinbase_tx_sum <start_height> <block_count> Print the sum of coinbase transactions. >>> print_coinbase_tx_sum 100 3 Sum of coinbase transactions between block heights [100, 103) is 52.771474879207 consisting of 52.771474879207 in emissions, and 0.000000000000 in fees","title":"print_coinbase_tx_sum"},{"location":"documentation/aeond/commands/#print_height","text":"print_height Prints the total number of mined blocks. >>> print_height 1286130","title":"print_height"},{"location":"documentation/aeond/commands/#print_pl","text":"print_pl Peer list historical information. Column headers are: white/gray peer|Peer ID|IP address|elapsed time since last seen . White peers are online and reachable and grey peers are offline. >>> print_pl ... white ef7e60xxxxxxx881 xxx.110.xxx.146:11180 d79.h0.m22.s20 white 9eae3xxxx3b32ed4 xxx.63.xxx.22:11180 d79.h7.m38.s6 white ad9xxxxxxfe6a73e xxx.45.xxx.241:32404 d79.h9.m11.s29 white 70da0187xxxx7656 xxx.142.xxx.104:11180 d79.h15.m37.s36 gray 2ddac6xxxx8cc587 xxx.201.xxx.248:11180 d0.h0.m4.s59 gray 9125218xxxx065bd xxx.145.xxx.4:11180 d0.h1.m36.s6 gray e40da7xxxx21f7b1 xxx.126.xxx.94:11180 d1.h3.m40.s2 gray d6b4738bxxxx3c7f xxx.160.xxx.83:11180 d1.h13.m34.s25 ...","title":"print_pl"},{"location":"documentation/aeond/commands/#print_pl_stats","text":"print_pl_stats Print peer list counts and limits. >>> print_pl_stats White list size: 235/1000 (23.5%) Gray list size: 486/5000 (9.72%)","title":"print_pl_stats"},{"location":"documentation/aeond/commands/#print_pool","text":"print_pool Print the transaction pool using a long format.","title":"print_pool"},{"location":"documentation/aeond/commands/#print_pool_sh","text":"print_pool_sh Print transaction pool using a short format.","title":"print_pool_sh"},{"location":"documentation/aeond/commands/#print_pool_stats","text":"print_pool_stats Print various transaction pool information. >>> print_pool_stats 0 tx(es), 0 bytes total (min 0, max 0, avg 0, median 0) fees 0.000000000000 (avg 0.000000000000 per tx, 0.000000000000 per byte) 0 double spends, 0 not relayed, 0 failing, 0 older than 10 minutes (oldest -), no backlo","title":"print_pool_stats"},{"location":"documentation/aeond/commands/#print_status","text":"print_status status for non-interactive mode.","title":"print_status"},{"location":"documentation/aeond/commands/#print_tx","text":"print_tx <tx_hash> [+hex] [+json] Find a transaction by hash and show information using +hex or +json . >>> print_tx 0b3aef5340883a313522df41a6534ce05c43c62abfb8861b804727dfd89d57c6 +hex +json Found in blockchain at height 1286136 01b4c04e01fff8bf4e058090bcfd02028bc55b44ca98800e93fc2aae1fce11cc37c8be36940d1fa2d85c3d7f03e156b8808cee891a029c4a1ed54864faf461feef6677e246de5b13a2b17aa3d34c3a477894c091569b80d88ee16f025cd087417aa17ccd4b8baead77780ed9b9132c4875480a0f012c4553ddff96418080dd9da41702116cb270c89667ee374011fb77bc0af813e9fed7e41db91c0d938a06087dff5280c0a8ca9a3a02a50b58d5ff5c87b1d87ad6d5af31b3975251b77751b4898b1c51e1ab58fc5d7634011a83442004f6ce96d32ff3129d721d9bdcc790164c3801b0285deec44f47e91e02110000000306d0ef9f000000000000000000 { \"version\": 1, \"unlock_time\": 1286196, \"vin\": [ { \"gen\": { \"height\": 1286136 } } ], \"vout\": [ { \"amount\": 800000000, \"target\": { \"key\": \"8bc55b44ca98800e93fc2aae1fce11cc37c8be36940d1fa2d85c3d7f03e156b8\" } }, { \"amount\": 7000000000, \"target\": { \"key\": \"9c4a1ed54864faf461feef6677e246de5b13a2b17aa3d34c3a477894c091569b\" } }, { \"amount\": 30000000000, \"target\": { \"key\": \"5cd087417aa17ccd4b8baead77780ed9b9132c4875480a0f012c4553ddff9641\" } }, { \"amount\": 800000000000, \"target\": { \"key\": \"116cb270c89667ee374011fb77bc0af813e9fed7e41db91c0d938a06087dff52\" } }, { \"amount\": 2000000000000, \"target\": { \"key\": \"a50b58d5ff5c87b1d87ad6d5af31b3975251b77751b4898b1c51e1ab58fc5d76\" } } ], \"extra\": [ 1, 26, 131, 68, 32, 4, 246, 206, 150, 211, 47, 243, 18, 157, 114, 29, 155, 220, 199, 144, 22, 76, 56, 1, 176, 40, 93, 238, 196, 79, 71, 233, 30, 2, 17, 0, 0, 0, 3, 6, 208, 239, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], \"signatures\": [ ] }","title":"print_tx"},{"location":"documentation/aeond/commands/#relay_tx","text":"relay_tx <txid> Relay a transaction based on its id.","title":"relay_tx"},{"location":"documentation/aeond/commands/#save","text":"save Save the blockchain. >>> save Blockchain saved","title":"save"},{"location":"documentation/aeond/commands/#set_log","text":"set_log <level>|<{+,-,}categories> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE . Each of the higher log levels contains the log levels below them. So for example set_log 3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example set_log net.p2p:INFO . This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels. >>> set_log net.p2p:TRACE Log categories are now net.p2p:TRACE 2020-11-29 17:08:11.624 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:177 2020-11-29 17:08:11.625 [P2P0] INFO net.p2p src/p2p/net_node.inl:941 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1140 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1122 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1137 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:925 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:169 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:177 2020-11-29 17:08:16.626 [P2P0] INFO net.p2p src/p2p/net_node.inl:941 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1140 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1122 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1137 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:925 2020-11-29 17:08:16.627 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:169 >>> set_log net.p2p:NONE Log categories are now net.p2p:NONE","title":"set_log"},{"location":"documentation/aeond/commands/#show_hr","text":"show_hr If mining, hashrate info will begin to be printed to the console at a regular interval. >>> show_hr Hash rate logging is on hashrate: 321685.937540986","title":"show_hr"},{"location":"documentation/aeond/commands/#start_mining","text":"start_mining <addr> [<threads>] Spawns mining process. >>> start_mining WmtFPiaD2d4gM2TbrU1vYdZABqoVzYBicGPfXfSRMY2QYWRscJPDPDy67y1oiU3CYNhXCnKwn6aDpVGuX2nqcp5D1HWr2N7mg 1 2020-11-29 15:18:26.411 7f65467fc700 WARN miner src/cryptonote_basic/miner.cpp:325 Mining has started with 1 threads, good luck! 2020-11-29 15:18:26.411 [miner 0] INFO global src/cryptonote_basic/miner.cpp:441 Miner thread was started [0]","title":"start_mining"},{"location":"documentation/aeond/commands/#status","text":"status Prints various network related information. >>> status Height: 1286128/1286128 (100.0%) on mainnet, not mining, net hash 12.23 TH/s, v9, 0(out)+0(in) connections, uptime 0d 0h 1m 9s","title":"status"},{"location":"documentation/aeond/commands/#stop_daemon","text":"stop_daemon Stops the daemon process.","title":"stop_daemon"},{"location":"documentation/aeond/commands/#stop_mining","text":"stop_mining Halts the mining process. >>> stop_mining 2020-11-29 15:41:12.639 [miner 0] INFO global src/cryptonote_basic/miner.cpp:510 Miner thread stopped [0] Mining stopped","title":"stop_mining"},{"location":"documentation/aeond/commands/#sync_info","text":"sync_info Prints network sychronization information. >>> sync_info Height: 1286139, target: 1286139 (100%) Downloading at 0 kB/s 1 peers 168.119.38.182:49802 22591ed177acf57b normal 1286139 0 kB/s, 0 blocks / 0 MB queued 0 spans, 0 MB","title":"sync_info"},{"location":"documentation/aeond/commands/#unban","text":"unban <IP> Unban a given IP. >>> unban 127.0.0.1","title":"unban"},{"location":"documentation/aeond/commands/#version","text":"version Print the software version you are using. >>> version Aeon 'Chronos' (v0.14.1.0-release)","title":"version"},{"location":"documentation/aeond/options/","text":"aeond Usage ./aeond [options] [commands] Description These are the options for the Aeon peer-to-peer node. They will configure how the node operates. Options config-file config-file=<path> Specify a config file to load options from. An example config file is shown below. # /path/to/file/aeond.conf daemon-address=192.168.0.1:9149 daemon-login=user:rpcpassword trusted-daemon=1 password=walletpassword Then launch wallet-cli with the following command: ./aeond --config-file=/path/to/file/aeond.conf help help Produce a help message with this list available options. bootstrap-daemon-address bootstrap-daemon-address=<ip_address>:<port> URL of a 'bootstrap' remote daemon that the connected wallets can use while this daemon is still not fully synced. ./aeond --bootstrap-daemon-address=127.0.0.1:11180 bootstrap-daemon-login bootstrap-daemon-login=<username>:<password> Specify username:password for the bootstrap daemon login. ./aeond --bootstrap-daemon-address=127.0.0.1:11180 --bootstrap-daemon-login=someuser:theirpassword data-dir data-dir=<path> Specify data directory to store the blockchain data base information. ./aeond --data-dir=/path/to/some/directory db-salvage db-salvage[=<1|0>] Try to salvage a blockchain database if it seems corrupted. db-sync-mode db-sync-mode=[safe|fast|fastest]:[sync|async]:[<blocks_per_sync>[blocks]|<bytes_per_sync>[bytes]] Specify sync option. ./aeond --db-sync-mode=fast:async:250000000bytes db-type db-type=<type> Specify database type, available: lmdb . fast-block-sync fsat-block-sync[=<1|0>] Sync up most of the way by using block hashes stored in source code. limit-blocks limit-blocks=<number_of_blocks> Limit how many blocks to sync at once during chain synchronization. 0 is an adaptive setting which will change dynamically. max-txpool-weight max-txpool-weight=<number_of_bytes> Set maximum pending transaction pool size in bytes. in-peers in-peers=<number_of_peers> Set the maximum number of incoming peers connecting to your node. out-peers out-peers=<number_of_peers> Set the maximum number of outgoing peers you are connecting to. limit limit=<kB/s> Set both the download and upload limit. >>> limit limit-down is 8192 kB/s limit-up is 2048 kB/s >>> limit 8192 Set limit-down to 8192 kB/s Set limit-up to 8192 kB/s limit-rate-down limit-rate-down=<kB/s> Set the download limit. >>> limit_down limit-down is 8192 kB/s >>> limit_down 2048 Set limit-down to 2048 kB/s limit-rate-up limit-rate-up=<kB/s> Set the upload limit. >>> limit_up limit_up is 8192 kB/s >>> limit_up 2048 Set limit_up to 2048 kB/s max-concurrency max-concurrency=<number_of_cpu_threads> Set maximum number of CPU threads used by the daemon process for syncronizing blocks and processing transactions. prep-blocks-threads=<number_of_cpu_threads> prep-blocks-threads log-file log-file=<path> The path to be used for the log file. Default argument: aeon-wallet-cli.log max-log-file-size max-log-file-size=<bytes> Maximum log file size in bytes. Default argument: 104850000 max-log-files max-log-files=<number> Maximum number of rotated log files to be saved (no limit by setting to 0). Default argument: 50 log-level log-level=<level|category> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example --log-level=3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example --log-level=net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels. block-notify block-notify=<path> Run a program for each new block, '%s' will be replaced by the block hash. block-rate-notify block-rate-notify=<path> Run a program when the block rate undergoes large fluctuations. This might be a sign of large amounts of hash rate going on and off the Aeon network, and thus be of potential interest in predicting attacks. %t will be replaced by the number of minutes for the observation window, %b by the number of blocks observed within that window, and %e by the number of blocks that was expected in that window. It is suggested that this notification is used to automatically increase the number of confirmations required before a payment is acted upon. reorg-notify reorg-notify=<path> Run a program for each reorg, '%s' will be replaced by the split height, '%h' will be replaced by the new blockchain height, '%n' will be replaced by the number of new blocks in the new chain, and '%d' will be replaced by the number of blocks discarded from the old chain. p2p-bind-ip p2p-bind-ip=<ip_address> Interface for p2p network protocol. offline offline[=<1|0>] Do not listen for peers, nor connect to any. p2p-bind-port p2p-bind-port=<port> Port for p2p network protocol. hide-my-port hide-my-port[=<1|0>] Do not announce yourself as peerlist candidate. p2p-external-port p2p-external-port=<port> External port for p2p network protocol (if port forwarding used with NAT). confirm-external-bind confirm-external-bind[=<1|0>] Confirm ip value is NOT a loopback (local) IP. add-peer add-peer=<ip_address>:<port> Manually add peer to local peerlist. add-exclusive-node add-exclusive-node=<ip_address>:<port> Specify list of peers to connect to only. If this option is given the options add-priority-node and seed-node are ignored. peer-priority peer-priority=<ip_address>:<port> Specify list of peers to connect to and attempt to keep the connection open. rpc-bind-ip rpc-bind-ip=<ip_address> Specify IP to bind RPC server. rpc-login rpc-login=<username>[:<password>] Specify username[:password] required for RPC server. rpc-access-control-origins Specify a comma separated list of origins to allow cross origin resource sharing. rpc-bind-port rpc-bind-port=<port> Specify IP to bind RPC server. restricted-rpc restricted-rpc[=<1|0>] Restrict RPC to view only commands and do not return privacy sensitive data in RPC calls. rpc-restricted-port rpc-restricted-port=<port> Port for restricted RPC server. zmq-rpc-bind-ip zmq-rpc-bind-ip=<ip_address> IP for ZMQ RPC server to listen on. zmq-rpc-bind-port zmq-rpc-bind-port=<port> Port for ZMQ RPC server to listen on. test-dbg-lock-sleep test-dbg-lock-sleep[=<1|0>] Sleep time in ms, defaults to 0 (off), used to debug before/after locking mutex. Values 100 to 1000 are good for tests. test-drop-download test-drop-download[=<1|0>] For net tests: in download, discard ALL blocks instead checking/saving them (very fast). test-drop-download-height test-drop-download-height[=<1|0>] Like test-drop-download but discards only after around certain height. fixed-difficulty fixed-difficulty=<difficulty> Fixed difficulty used for testing. fluffy-blocks fluffy-blocks[=<1|0>] Relay blocks as fluffy blocks (obsolete, now default). no-fluffy-blocks no-fluffy-blocks[=<1|0>] Relay blocks as normal blocks. allow-local-ip allow-local-ip[=<1|0>] Allow local ip add to peer list, mostly in debug purposes. bg-mining-enable bg-mining-enable[=<1|0>] Enable/disable background mining. bg-mining-ignore-battery bg-mining-ignore-battery[=<1|0>] If true, assumes plugged in when unable to query system power status. bg-mining-min-idle-interval bg-mining-min-idle-interval=<seconds> Specify min lookback interval in seconds for determining idle state. bg-mining-idle-threshold bg-mining-min-idle-interval=<percentage> Specify minimum avg idle percentage over lookback interval. bg-mining-miner-target bg-mining-miner-target=<percentage> Specify maximum percentage cpu use by miner(s). start-mining start-mining=<address> Specify wallet address to mining for. mining-threads mining-threads=<number> Specify mining threads count. regtest regtest[=<1|0>] Run in a regression testing mode. coinbase-message coinbase-message=<message> Specify file for extra messages to include into transactions. detach detach[=<1|0>] Run as background process. enforce-dns-checkpoints enforce-dns-checkpoints[=<1|0>] checkpoints from DNS server will be enforced. disable-dns-checkpoints disable-dns-checkpoints[=<1|0>] Do not retrieve checkpoints from DNS. non-interactive non-interactive[=<1|0>] Run non-interactive. pidfile pidfile=<path> File path to write the daemon's PID to a file. stagenet stagenet[=<1|0>] Run on stagenet. The daemon must be launched with --stagenet flag. testnet testnet[=<1|0>] Run on testnet. The wallet must be launched with --testnet flag. show-time-stats show-time-stats[=<1|0>] Show time-stats when processing blocks/txs and disk synchronization. tos-flag tos-flag[=<1|0>] Set terms of service flag. check-update check-update[=<1|0>] Check for new versions of Aeon. no-idg no-idg[=<1|0>] Disable UPnP port mapping. version version Output version information. os-version os-version OS for which this executable was compiled.","title":"Options"},{"location":"documentation/aeond/options/#aeond","text":"","title":"aeond"},{"location":"documentation/aeond/options/#usage","text":"./aeond [options] [commands]","title":"Usage"},{"location":"documentation/aeond/options/#description","text":"These are the options for the Aeon peer-to-peer node. They will configure how the node operates.","title":"Description"},{"location":"documentation/aeond/options/#options","text":"","title":"Options"},{"location":"documentation/aeond/options/#config-file","text":"config-file=<path> Specify a config file to load options from. An example config file is shown below. # /path/to/file/aeond.conf daemon-address=192.168.0.1:9149 daemon-login=user:rpcpassword trusted-daemon=1 password=walletpassword Then launch wallet-cli with the following command: ./aeond --config-file=/path/to/file/aeond.conf","title":"config-file"},{"location":"documentation/aeond/options/#help","text":"help Produce a help message with this list available options.","title":"help"},{"location":"documentation/aeond/options/#bootstrap-daemon-address","text":"bootstrap-daemon-address=<ip_address>:<port> URL of a 'bootstrap' remote daemon that the connected wallets can use while this daemon is still not fully synced. ./aeond --bootstrap-daemon-address=127.0.0.1:11180","title":"bootstrap-daemon-address"},{"location":"documentation/aeond/options/#bootstrap-daemon-login","text":"bootstrap-daemon-login=<username>:<password> Specify username:password for the bootstrap daemon login. ./aeond --bootstrap-daemon-address=127.0.0.1:11180 --bootstrap-daemon-login=someuser:theirpassword","title":"bootstrap-daemon-login"},{"location":"documentation/aeond/options/#data-dir","text":"data-dir=<path> Specify data directory to store the blockchain data base information. ./aeond --data-dir=/path/to/some/directory","title":"data-dir"},{"location":"documentation/aeond/options/#db-salvage","text":"db-salvage[=<1|0>] Try to salvage a blockchain database if it seems corrupted.","title":"db-salvage"},{"location":"documentation/aeond/options/#db-sync-mode","text":"db-sync-mode=[safe|fast|fastest]:[sync|async]:[<blocks_per_sync>[blocks]|<bytes_per_sync>[bytes]] Specify sync option. ./aeond --db-sync-mode=fast:async:250000000bytes","title":"db-sync-mode"},{"location":"documentation/aeond/options/#db-type","text":"db-type=<type> Specify database type, available: lmdb .","title":"db-type"},{"location":"documentation/aeond/options/#fast-block-sync","text":"fsat-block-sync[=<1|0>] Sync up most of the way by using block hashes stored in source code.","title":"fast-block-sync"},{"location":"documentation/aeond/options/#limit-blocks","text":"limit-blocks=<number_of_blocks> Limit how many blocks to sync at once during chain synchronization. 0 is an adaptive setting which will change dynamically.","title":"limit-blocks"},{"location":"documentation/aeond/options/#max-txpool-weight","text":"max-txpool-weight=<number_of_bytes> Set maximum pending transaction pool size in bytes.","title":"max-txpool-weight"},{"location":"documentation/aeond/options/#in-peers","text":"in-peers=<number_of_peers> Set the maximum number of incoming peers connecting to your node.","title":"in-peers"},{"location":"documentation/aeond/options/#out-peers","text":"out-peers=<number_of_peers> Set the maximum number of outgoing peers you are connecting to.","title":"out-peers"},{"location":"documentation/aeond/options/#limit","text":"limit=<kB/s> Set both the download and upload limit. >>> limit limit-down is 8192 kB/s limit-up is 2048 kB/s >>> limit 8192 Set limit-down to 8192 kB/s Set limit-up to 8192 kB/s","title":"limit"},{"location":"documentation/aeond/options/#limit-rate-down","text":"limit-rate-down=<kB/s> Set the download limit. >>> limit_down limit-down is 8192 kB/s >>> limit_down 2048 Set limit-down to 2048 kB/s","title":"limit-rate-down"},{"location":"documentation/aeond/options/#limit-rate-up","text":"limit-rate-up=<kB/s> Set the upload limit. >>> limit_up limit_up is 8192 kB/s >>> limit_up 2048 Set limit_up to 2048 kB/s","title":"limit-rate-up"},{"location":"documentation/aeond/options/#max-concurrency","text":"max-concurrency=<number_of_cpu_threads> Set maximum number of CPU threads used by the daemon process for syncronizing blocks and processing transactions. prep-blocks-threads=<number_of_cpu_threads>","title":"max-concurrency"},{"location":"documentation/aeond/options/#prep-blocks-threads","text":"","title":"prep-blocks-threads"},{"location":"documentation/aeond/options/#log-file","text":"log-file=<path> The path to be used for the log file. Default argument: aeon-wallet-cli.log","title":"log-file"},{"location":"documentation/aeond/options/#max-log-file-size","text":"max-log-file-size=<bytes> Maximum log file size in bytes. Default argument: 104850000","title":"max-log-file-size"},{"location":"documentation/aeond/options/#max-log-files","text":"max-log-files=<number> Maximum number of rotated log files to be saved (no limit by setting to 0). Default argument: 50","title":"max-log-files"},{"location":"documentation/aeond/options/#log-level","text":"log-level=<level|category> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example --log-level=3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example --log-level=net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels.","title":"log-level"},{"location":"documentation/aeond/options/#block-notify","text":"block-notify=<path> Run a program for each new block, '%s' will be replaced by the block hash.","title":"block-notify"},{"location":"documentation/aeond/options/#block-rate-notify","text":"block-rate-notify=<path> Run a program when the block rate undergoes large fluctuations. This might be a sign of large amounts of hash rate going on and off the Aeon network, and thus be of potential interest in predicting attacks. %t will be replaced by the number of minutes for the observation window, %b by the number of blocks observed within that window, and %e by the number of blocks that was expected in that window. It is suggested that this notification is used to automatically increase the number of confirmations required before a payment is acted upon.","title":"block-rate-notify"},{"location":"documentation/aeond/options/#reorg-notify","text":"reorg-notify=<path> Run a program for each reorg, '%s' will be replaced by the split height, '%h' will be replaced by the new blockchain height, '%n' will be replaced by the number of new blocks in the new chain, and '%d' will be replaced by the number of blocks discarded from the old chain.","title":"reorg-notify"},{"location":"documentation/aeond/options/#p2p-bind-ip","text":"p2p-bind-ip=<ip_address> Interface for p2p network protocol.","title":"p2p-bind-ip"},{"location":"documentation/aeond/options/#offline","text":"offline[=<1|0>] Do not listen for peers, nor connect to any.","title":"offline"},{"location":"documentation/aeond/options/#p2p-bind-port","text":"p2p-bind-port=<port> Port for p2p network protocol.","title":"p2p-bind-port"},{"location":"documentation/aeond/options/#hide-my-port","text":"hide-my-port[=<1|0>] Do not announce yourself as peerlist candidate.","title":"hide-my-port"},{"location":"documentation/aeond/options/#p2p-external-port","text":"p2p-external-port=<port> External port for p2p network protocol (if port forwarding used with NAT).","title":"p2p-external-port"},{"location":"documentation/aeond/options/#confirm-external-bind","text":"confirm-external-bind[=<1|0>] Confirm ip value is NOT a loopback (local) IP.","title":"confirm-external-bind"},{"location":"documentation/aeond/options/#add-peer","text":"add-peer=<ip_address>:<port> Manually add peer to local peerlist.","title":"add-peer"},{"location":"documentation/aeond/options/#add-exclusive-node","text":"add-exclusive-node=<ip_address>:<port> Specify list of peers to connect to only. If this option is given the options add-priority-node and seed-node are ignored.","title":"add-exclusive-node"},{"location":"documentation/aeond/options/#peer-priority","text":"peer-priority=<ip_address>:<port> Specify list of peers to connect to and attempt to keep the connection open.","title":"peer-priority"},{"location":"documentation/aeond/options/#rpc-bind-ip","text":"rpc-bind-ip=<ip_address> Specify IP to bind RPC server.","title":"rpc-bind-ip"},{"location":"documentation/aeond/options/#rpc-login","text":"rpc-login=<username>[:<password>] Specify username[:password] required for RPC server.","title":"rpc-login"},{"location":"documentation/aeond/options/#rpc-access-control-origins","text":"Specify a comma separated list of origins to allow cross origin resource sharing.","title":"rpc-access-control-origins"},{"location":"documentation/aeond/options/#rpc-bind-port","text":"rpc-bind-port=<port> Specify IP to bind RPC server.","title":"rpc-bind-port"},{"location":"documentation/aeond/options/#restricted-rpc","text":"restricted-rpc[=<1|0>] Restrict RPC to view only commands and do not return privacy sensitive data in RPC calls.","title":"restricted-rpc"},{"location":"documentation/aeond/options/#rpc-restricted-port","text":"rpc-restricted-port=<port> Port for restricted RPC server.","title":"rpc-restricted-port"},{"location":"documentation/aeond/options/#zmq-rpc-bind-ip","text":"zmq-rpc-bind-ip=<ip_address> IP for ZMQ RPC server to listen on.","title":"zmq-rpc-bind-ip"},{"location":"documentation/aeond/options/#zmq-rpc-bind-port","text":"zmq-rpc-bind-port=<port> Port for ZMQ RPC server to listen on.","title":"zmq-rpc-bind-port"},{"location":"documentation/aeond/options/#test-dbg-lock-sleep","text":"test-dbg-lock-sleep[=<1|0>] Sleep time in ms, defaults to 0 (off), used to debug before/after locking mutex. Values 100 to 1000 are good for tests.","title":"test-dbg-lock-sleep"},{"location":"documentation/aeond/options/#test-drop-download","text":"test-drop-download[=<1|0>] For net tests: in download, discard ALL blocks instead checking/saving them (very fast).","title":"test-drop-download"},{"location":"documentation/aeond/options/#test-drop-download-height","text":"test-drop-download-height[=<1|0>] Like test-drop-download but discards only after around certain height.","title":"test-drop-download-height"},{"location":"documentation/aeond/options/#fixed-difficulty","text":"fixed-difficulty=<difficulty> Fixed difficulty used for testing.","title":"fixed-difficulty"},{"location":"documentation/aeond/options/#fluffy-blocks","text":"fluffy-blocks[=<1|0>] Relay blocks as fluffy blocks (obsolete, now default).","title":"fluffy-blocks"},{"location":"documentation/aeond/options/#no-fluffy-blocks","text":"no-fluffy-blocks[=<1|0>] Relay blocks as normal blocks.","title":"no-fluffy-blocks"},{"location":"documentation/aeond/options/#allow-local-ip","text":"allow-local-ip[=<1|0>] Allow local ip add to peer list, mostly in debug purposes.","title":"allow-local-ip"},{"location":"documentation/aeond/options/#bg-mining-enable","text":"bg-mining-enable[=<1|0>] Enable/disable background mining.","title":"bg-mining-enable"},{"location":"documentation/aeond/options/#bg-mining-ignore-battery","text":"bg-mining-ignore-battery[=<1|0>] If true, assumes plugged in when unable to query system power status.","title":"bg-mining-ignore-battery"},{"location":"documentation/aeond/options/#bg-mining-min-idle-interval","text":"bg-mining-min-idle-interval=<seconds> Specify min lookback interval in seconds for determining idle state.","title":"bg-mining-min-idle-interval"},{"location":"documentation/aeond/options/#bg-mining-idle-threshold","text":"bg-mining-min-idle-interval=<percentage> Specify minimum avg idle percentage over lookback interval.","title":"bg-mining-idle-threshold"},{"location":"documentation/aeond/options/#bg-mining-miner-target","text":"bg-mining-miner-target=<percentage> Specify maximum percentage cpu use by miner(s).","title":"bg-mining-miner-target"},{"location":"documentation/aeond/options/#start-mining","text":"start-mining=<address> Specify wallet address to mining for.","title":"start-mining"},{"location":"documentation/aeond/options/#mining-threads","text":"mining-threads=<number> Specify mining threads count.","title":"mining-threads"},{"location":"documentation/aeond/options/#regtest","text":"regtest[=<1|0>] Run in a regression testing mode.","title":"regtest"},{"location":"documentation/aeond/options/#coinbase-message","text":"coinbase-message=<message> Specify file for extra messages to include into transactions.","title":"coinbase-message"},{"location":"documentation/aeond/options/#detach","text":"detach[=<1|0>] Run as background process.","title":"detach"},{"location":"documentation/aeond/options/#enforce-dns-checkpoints","text":"enforce-dns-checkpoints[=<1|0>] checkpoints from DNS server will be enforced.","title":"enforce-dns-checkpoints"},{"location":"documentation/aeond/options/#disable-dns-checkpoints","text":"disable-dns-checkpoints[=<1|0>] Do not retrieve checkpoints from DNS.","title":"disable-dns-checkpoints"},{"location":"documentation/aeond/options/#non-interactive","text":"non-interactive[=<1|0>] Run non-interactive.","title":"non-interactive"},{"location":"documentation/aeond/options/#pidfile","text":"pidfile=<path> File path to write the daemon's PID to a file.","title":"pidfile"},{"location":"documentation/aeond/options/#stagenet","text":"stagenet[=<1|0>] Run on stagenet. The daemon must be launched with --stagenet flag.","title":"stagenet"},{"location":"documentation/aeond/options/#testnet","text":"testnet[=<1|0>] Run on testnet. The wallet must be launched with --testnet flag.","title":"testnet"},{"location":"documentation/aeond/options/#show-time-stats","text":"show-time-stats[=<1|0>] Show time-stats when processing blocks/txs and disk synchronization.","title":"show-time-stats"},{"location":"documentation/aeond/options/#tos-flag","text":"tos-flag[=<1|0>] Set terms of service flag.","title":"tos-flag"},{"location":"documentation/aeond/options/#check-update","text":"check-update[=<1|0>] Check for new versions of Aeon.","title":"check-update"},{"location":"documentation/aeond/options/#no-idg","text":"no-idg[=<1|0>] Disable UPnP port mapping.","title":"no-idg"},{"location":"documentation/aeond/options/#version","text":"version Output version information.","title":"version"},{"location":"documentation/aeond/options/#os-version","text":"os-version OS for which this executable was compiled.","title":"os-version"},{"location":"documentation/wallet-cli/commands/","text":"Wallet CLI Usage ./aeon-wallet-cli [options] [commands] Description This is the command line Aeon wallet. It is a tool to manage aeon transfers and addresses. It needs to connect to an Aeon daemon to work correctly. Commands account account Shows all the existing accounts along with their balances. account new account new <label text with white spaces allowed> Creates a new account with its label initialized by the provided label text (which can be empty). account switch account switch <index> Switches to the account specified by <index> . account label account label <index> <label text with white spaces allowed> Sets the label of the account specified by to the provided label text. account tag account tag <tag_name> <account_index_1> [<account_index_2> ...] A tag <tag_name> is assigned to the specified accounts <account_index_1> , <account_index_2> , .... account untag account untag <account_index_1> [<account_index_2> ...] The tags assigned to the specified accounts <account_index_1> , <account_index_2> ..., are removed. account tag_description account tag_description <tag_name> <description> The tag <tag_name> is assigned an arbitrary text <description> . address address (<index_min> [<index_max>]|all) Shows the default or specified address. address new address new <label text with white spaces allowed> Creates a new address with the provided label text (which can be empty). address label address label <index> <label text with white spaces allowed> Sets the label of the address specified by <index> to the provided label text. address_book address_book Print all saved addresses in local storage. >>> address_book address_book Index: 0 Address: WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHxxxxxxxxxS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo Payment ID: <0000000000000000000000000000000000000000000000000000000000000000> Description: test Index: 1 Address: WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHxxxxxxxxxS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo Payment ID: <0000000000000000000000000000000000000000000000000000000000000000> Description: test address_book add address_book add ((<address> [pid <id>])|<integrated address>) [<description possibly with whitespaces>] Add an address to the local address book. >>> address_book add WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHxxxxxxxxxS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo test Index: 0 Address: WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHcYcQgVsqPS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo Payment ID: <0000000000000000000000000000000000000000000000000000000000000000> Description: test address_book delete address_book delete <index> Delete address at <index> . >>> address_book delete 1 balance balance [detail] Show the wallet's balance of the currently selected account. bc_height bc_height Prints the connected daemon's height. check_reserve_proof check_reserve_proof <address> <signature_file> [<message>] Check a signature proving that the owner of <address> holds at least this much, optionally with a challenge string <message> . check_spend_proof check_spend_proof <txid> <signature_file> [<message>] Check a signature proving that the signer generated <txid> , optionally with a challenge string <message> . check_tx_key check_tx_key <txid> <txkey> <address> Check the amount going to <address> in <txid> . check_tx_proof check_tx_proof <txid> <address> <signature_file> [<message>] Check the proof for funds going to <address> in <txid> with the challenge string <message> if any. donate donate [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <amount> [<payment_id>] Donate <amount> to the development team ( donate.aeon.cash ). encrypted_seed encrypted_seed Display the encrypted Electrum-style mnemonic seed. exchange_multisig_keys exchange_multisig_keys <string> [<string>...] export_key_images <file> export_multisig_info <filename> export_outputs <file> export_raw_multisig_tx <filename> export_transfers [in|out|all|pending|failed|coinbase] [index=<N1>[,<N2>,...]] [<min_height> [<max_height>]] [output=<filepath>] finalize_multisig <string> [<string>...] get_description get_reserve_proof (all|<amount>) [<message>] get_spend_proof <txid> [<message>] get_tx_key <txid> get_tx_note <txid> get_tx_proof <txid> <address> [<message>] help [<command>] import_key_images <file> import_multisig_info <filename> [<filename>...] import_outputs <file> incoming_transfers [available|unavailable] [verbose] [index=<N1>[,<N2>[,...]]] integrated_address [<payment_id> | <address>] is_output_spent <amount>/<offset> locked_sweep_all [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <address> <lockblocks> [<payment_id>] locked_transfer [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] (<URI> | <addr> <amount>) <lockblocks> [<payment_id>] make_multisig <threshold> <string1> [<string>...] mark_output_spent <amount>/<offset> | <filename> [add] mark_output_unspent <amount>/<offset> password payment_id payments <PID_1> [<PID_2> ... <PID_N>] prepare_multisig print_ring <key_image> | <txid> refresh rescan_bc rescan_spent save save_bc save_known_rings save_watch_only seed set <option> [<value>] set_daemon <host>[:<port>] [trusted|untrusted] set_description [free text note] set_log <level>|{+,-,}<categories> set_ring <filename> | ( <key_image> absolute|relative <index> [<index>...] ) set_tx_key <txid> <tx_key> set_tx_note <txid> [free text note] show_transfer <txid> show_transfers [in|out|pending|failed|pool|coinbase] [index=<N1>[,<N2>,...]] [<min_height> [<max_height>]] sign <file> sign_multisig <filename> sign_transfer [export_raw] spendkey start_mining [<number_of_threads>] [bg_mining] [ignore_battery] status stop_mining submit_multisig <filename> submit_transfer sweep_all [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <address> [<payment_id>] sweep_below <amount_threshold> [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <address> [<payment_id>] sweep_single [<priority>] [<ring_size>] <key_image> <address> [<payment_id>] sweep_unmixable transfer [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] (<URI> | <address> <amount>) [<payment_id>] unspent_outputs [index=<N1>[,<N2>,...]] [<min_amount> [<max_amount>]] verify <filename> <address> <signature> version viewkey wallet_info","title":"Commands"},{"location":"documentation/wallet-cli/commands/#wallet-cli","text":"","title":"Wallet CLI"},{"location":"documentation/wallet-cli/commands/#usage","text":"./aeon-wallet-cli [options] [commands]","title":"Usage"},{"location":"documentation/wallet-cli/commands/#description","text":"This is the command line Aeon wallet. It is a tool to manage aeon transfers and addresses. It needs to connect to an Aeon daemon to work correctly.","title":"Description"},{"location":"documentation/wallet-cli/commands/#commands","text":"","title":"Commands"},{"location":"documentation/wallet-cli/commands/#account","text":"account Shows all the existing accounts along with their balances.","title":"account"},{"location":"documentation/wallet-cli/commands/#account-new","text":"account new <label text with white spaces allowed> Creates a new account with its label initialized by the provided label text (which can be empty).","title":"account new"},{"location":"documentation/wallet-cli/commands/#account-switch","text":"account switch <index> Switches to the account specified by <index> .","title":"account switch"},{"location":"documentation/wallet-cli/commands/#account-label","text":"account label <index> <label text with white spaces allowed> Sets the label of the account specified by to the provided label text.","title":"account label"},{"location":"documentation/wallet-cli/commands/#account-tag","text":"account tag <tag_name> <account_index_1> [<account_index_2> ...] A tag <tag_name> is assigned to the specified accounts <account_index_1> , <account_index_2> , ....","title":"account tag"},{"location":"documentation/wallet-cli/commands/#account-untag","text":"account untag <account_index_1> [<account_index_2> ...] The tags assigned to the specified accounts <account_index_1> , <account_index_2> ..., are removed.","title":"account untag"},{"location":"documentation/wallet-cli/commands/#account-tag_description","text":"account tag_description <tag_name> <description> The tag <tag_name> is assigned an arbitrary text <description> .","title":"account tag_description"},{"location":"documentation/wallet-cli/commands/#address","text":"address (<index_min> [<index_max>]|all) Shows the default or specified address.","title":"address"},{"location":"documentation/wallet-cli/commands/#address-new","text":"address new <label text with white spaces allowed> Creates a new address with the provided label text (which can be empty).","title":"address new"},{"location":"documentation/wallet-cli/commands/#address-label","text":"address label <index> <label text with white spaces allowed> Sets the label of the address specified by <index> to the provided label text.","title":"address label"},{"location":"documentation/wallet-cli/commands/#address_book","text":"address_book Print all saved addresses in local storage. >>> address_book address_book Index: 0 Address: WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHxxxxxxxxxS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo Payment ID: <0000000000000000000000000000000000000000000000000000000000000000> Description: test Index: 1 Address: WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHxxxxxxxxxS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo Payment ID: <0000000000000000000000000000000000000000000000000000000000000000> Description: test","title":"address_book"},{"location":"documentation/wallet-cli/commands/#address_book-add","text":"address_book add ((<address> [pid <id>])|<integrated address>) [<description possibly with whitespaces>] Add an address to the local address book. >>> address_book add WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHxxxxxxxxxS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo test Index: 0 Address: WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHcYcQgVsqPS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo Payment ID: <0000000000000000000000000000000000000000000000000000000000000000> Description: test","title":"address_book add"},{"location":"documentation/wallet-cli/commands/#address_book-delete","text":"address_book delete <index> Delete address at <index> . >>> address_book delete 1","title":"address_book delete"},{"location":"documentation/wallet-cli/commands/#balance","text":"balance [detail] Show the wallet's balance of the currently selected account.","title":"balance"},{"location":"documentation/wallet-cli/commands/#bc_height","text":"bc_height Prints the connected daemon's height.","title":"bc_height"},{"location":"documentation/wallet-cli/commands/#check_reserve_proof","text":"check_reserve_proof <address> <signature_file> [<message>] Check a signature proving that the owner of <address> holds at least this much, optionally with a challenge string <message> .","title":"check_reserve_proof"},{"location":"documentation/wallet-cli/commands/#check_spend_proof","text":"check_spend_proof <txid> <signature_file> [<message>] Check a signature proving that the signer generated <txid> , optionally with a challenge string <message> .","title":"check_spend_proof"},{"location":"documentation/wallet-cli/commands/#check_tx_key","text":"check_tx_key <txid> <txkey> <address> Check the amount going to <address> in <txid> .","title":"check_tx_key"},{"location":"documentation/wallet-cli/commands/#check_tx_proof","text":"check_tx_proof <txid> <address> <signature_file> [<message>] Check the proof for funds going to <address> in <txid> with the challenge string <message> if any.","title":"check_tx_proof"},{"location":"documentation/wallet-cli/commands/#donate","text":"donate [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <amount> [<payment_id>] Donate <amount> to the development team ( donate.aeon.cash ).","title":"donate"},{"location":"documentation/wallet-cli/commands/#encrypted_seed","text":"encrypted_seed Display the encrypted Electrum-style mnemonic seed.","title":"encrypted_seed"},{"location":"documentation/wallet-cli/commands/#exchange_multisig_keys","text":"exchange_multisig_keys <string> [<string>...]","title":"exchange_multisig_keys"},{"location":"documentation/wallet-cli/commands/#export_key_images","text":"<file>","title":"export_key_images"},{"location":"documentation/wallet-cli/commands/#export_multisig_info","text":"<filename>","title":"export_multisig_info"},{"location":"documentation/wallet-cli/commands/#export_outputs","text":"<file>","title":"export_outputs"},{"location":"documentation/wallet-cli/commands/#export_raw_multisig_tx","text":"<filename>","title":"export_raw_multisig_tx"},{"location":"documentation/wallet-cli/commands/#export_transfers","text":"[in|out|all|pending|failed|coinbase] [index=<N1>[,<N2>,...]] [<min_height> [<max_height>]] [output=<filepath>]","title":"export_transfers"},{"location":"documentation/wallet-cli/commands/#finalize_multisig","text":"<string> [<string>...]","title":"finalize_multisig"},{"location":"documentation/wallet-cli/commands/#get_description","text":"","title":"get_description"},{"location":"documentation/wallet-cli/commands/#get_reserve_proof","text":"(all|<amount>) [<message>]","title":"get_reserve_proof"},{"location":"documentation/wallet-cli/commands/#get_spend_proof","text":"<txid> [<message>]","title":"get_spend_proof"},{"location":"documentation/wallet-cli/commands/#get_tx_key","text":"<txid>","title":"get_tx_key"},{"location":"documentation/wallet-cli/commands/#get_tx_note","text":"<txid>","title":"get_tx_note"},{"location":"documentation/wallet-cli/commands/#get_tx_proof","text":"<txid> <address> [<message>]","title":"get_tx_proof"},{"location":"documentation/wallet-cli/commands/#help","text":"[<command>]","title":"help"},{"location":"documentation/wallet-cli/commands/#import_key_images","text":"<file>","title":"import_key_images"},{"location":"documentation/wallet-cli/commands/#import_multisig_info","text":"<filename> [<filename>...]","title":"import_multisig_info"},{"location":"documentation/wallet-cli/commands/#import_outputs","text":"<file>","title":"import_outputs"},{"location":"documentation/wallet-cli/commands/#incoming_transfers","text":"[available|unavailable] [verbose] [index=<N1>[,<N2>[,...]]]","title":"incoming_transfers"},{"location":"documentation/wallet-cli/commands/#integrated_address","text":"[<payment_id> | <address>]","title":"integrated_address"},{"location":"documentation/wallet-cli/commands/#is_output_spent","text":"<amount>/<offset>","title":"is_output_spent"},{"location":"documentation/wallet-cli/commands/#locked_sweep_all","text":"[index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <address> <lockblocks> [<payment_id>]","title":"locked_sweep_all"},{"location":"documentation/wallet-cli/commands/#locked_transfer","text":"[index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] (<URI> | <addr> <amount>) <lockblocks> [<payment_id>]","title":"locked_transfer"},{"location":"documentation/wallet-cli/commands/#make_multisig","text":"<threshold> <string1> [<string>...]","title":"make_multisig"},{"location":"documentation/wallet-cli/commands/#mark_output_spent","text":"<amount>/<offset> | <filename> [add]","title":"mark_output_spent"},{"location":"documentation/wallet-cli/commands/#mark_output_unspent","text":"<amount>/<offset>","title":"mark_output_unspent"},{"location":"documentation/wallet-cli/commands/#password","text":"","title":"password"},{"location":"documentation/wallet-cli/commands/#payment_id","text":"","title":"payment_id"},{"location":"documentation/wallet-cli/commands/#payments","text":"<PID_1> [<PID_2> ... <PID_N>]","title":"payments"},{"location":"documentation/wallet-cli/commands/#prepare_multisig","text":"","title":"prepare_multisig"},{"location":"documentation/wallet-cli/commands/#print_ring","text":"<key_image> | <txid>","title":"print_ring"},{"location":"documentation/wallet-cli/commands/#refresh","text":"","title":"refresh"},{"location":"documentation/wallet-cli/commands/#rescan_bc","text":"","title":"rescan_bc"},{"location":"documentation/wallet-cli/commands/#rescan_spent","text":"","title":"rescan_spent"},{"location":"documentation/wallet-cli/commands/#save","text":"","title":"save"},{"location":"documentation/wallet-cli/commands/#save_bc","text":"","title":"save_bc"},{"location":"documentation/wallet-cli/commands/#save_known_rings","text":"","title":"save_known_rings"},{"location":"documentation/wallet-cli/commands/#save_watch_only","text":"","title":"save_watch_only"},{"location":"documentation/wallet-cli/commands/#seed","text":"","title":"seed"},{"location":"documentation/wallet-cli/commands/#set","text":"<option> [<value>]","title":"set"},{"location":"documentation/wallet-cli/commands/#set_daemon","text":"<host>[:<port>] [trusted|untrusted]","title":"set_daemon"},{"location":"documentation/wallet-cli/commands/#set_description","text":"[free text note]","title":"set_description"},{"location":"documentation/wallet-cli/commands/#set_log","text":"<level>|{+,-,}<categories>","title":"set_log"},{"location":"documentation/wallet-cli/commands/#set_ring","text":"<filename> | ( <key_image> absolute|relative <index> [<index>...] )","title":"set_ring"},{"location":"documentation/wallet-cli/commands/#set_tx_key","text":"<txid> <tx_key>","title":"set_tx_key"},{"location":"documentation/wallet-cli/commands/#set_tx_note","text":"<txid> [free text note]","title":"set_tx_note"},{"location":"documentation/wallet-cli/commands/#show_transfer","text":"<txid>","title":"show_transfer"},{"location":"documentation/wallet-cli/commands/#show_transfers","text":"[in|out|pending|failed|pool|coinbase] [index=<N1>[,<N2>,...]] [<min_height> [<max_height>]]","title":"show_transfers"},{"location":"documentation/wallet-cli/commands/#sign","text":"<file>","title":"sign"},{"location":"documentation/wallet-cli/commands/#sign_multisig","text":"<filename>","title":"sign_multisig"},{"location":"documentation/wallet-cli/commands/#sign_transfer","text":"[export_raw]","title":"sign_transfer"},{"location":"documentation/wallet-cli/commands/#spendkey","text":"","title":"spendkey"},{"location":"documentation/wallet-cli/commands/#start_mining","text":"[<number_of_threads>] [bg_mining] [ignore_battery]","title":"start_mining"},{"location":"documentation/wallet-cli/commands/#status","text":"","title":"status"},{"location":"documentation/wallet-cli/commands/#stop_mining","text":"","title":"stop_mining"},{"location":"documentation/wallet-cli/commands/#submit_multisig","text":"<filename>","title":"submit_multisig"},{"location":"documentation/wallet-cli/commands/#submit_transfer","text":"","title":"submit_transfer"},{"location":"documentation/wallet-cli/commands/#sweep_all","text":"[index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <address> [<payment_id>]","title":"sweep_all"},{"location":"documentation/wallet-cli/commands/#sweep_below","text":"<amount_threshold> [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <address> [<payment_id>]","title":"sweep_below"},{"location":"documentation/wallet-cli/commands/#sweep_single","text":"[<priority>] [<ring_size>] <key_image> <address> [<payment_id>]","title":"sweep_single"},{"location":"documentation/wallet-cli/commands/#sweep_unmixable","text":"","title":"sweep_unmixable"},{"location":"documentation/wallet-cli/commands/#transfer","text":"[index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] (<URI> | <address> <amount>) [<payment_id>]","title":"transfer"},{"location":"documentation/wallet-cli/commands/#unspent_outputs","text":"[index=<N1>[,<N2>,...]] [<min_amount> [<max_amount>]]","title":"unspent_outputs"},{"location":"documentation/wallet-cli/commands/#verify","text":"<filename> <address> <signature>","title":"verify"},{"location":"documentation/wallet-cli/commands/#version","text":"","title":"version"},{"location":"documentation/wallet-cli/commands/#viewkey","text":"","title":"viewkey"},{"location":"documentation/wallet-cli/commands/#wallet_info","text":"","title":"wallet_info"},{"location":"documentation/wallet-cli/options/","text":"Wallet CLI Usage ./aeon-wallet-cli [options] [commands] Description This is the command line Aeon wallet. It is a tool to manage aeon transfers and addresses. It needs to connect to an Aeon daemon to work correctly. Options config-file config-file=<path> Specify a config file to load options from. An example config file is shown below. # /path/to/file/aeond.conf daemon-address=192.168.0.1:9149 daemon-login=user:rpcpassword trusted-daemon=1 password=walletpassword Then launch wallet-cli with the following command: ./aeond --config-file=/path/to/file/aeond.conf help help Produce a help message with this list available options. log-file log-file=<path> The path to be used for the log file. Default argument: aeon-wallet-cli.log max-log-file-size max-log-file-size=<bytes> Maximum log file size in bytes. Default argument: 104850000 max-log-files max-log-files=<number> Maximum number of rotated log files to be saved (no limit by setting to 0). Default argument: 50 log-level log-level=<level|category> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example --log-level=3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example --log-level=net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels. daemon-address daemon-address=<ip_address>:<port> Use aeon daemon at ip-address:port. --daemon-address=192.168.0.1:9149 daemon-host daemon-host=<ip_address> Use daemon instance at specific IP address instead of localhost. --daemon-host=192.168.0.1 daemon-login daemon-login=<username>[:<password>] username:password or username credentials for daemon RPC client. do-not-relay do-not-relay[=<1|0>] Newly created transactions received by this daemon will not be relayed to the Aeon network. Default argument: 0 daemon-port daemon-port=<port> Use daemon instance at specified port. Default argument: 11181 trusted-daemon trusted-daemon[=<1|0>] Enable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default. untrusted-daemon untrusted-daemon[=<1|0>] Disable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default. allow-mismatched-daemon-version allow-mismatched-daemon-version[=<1|0>] Allow communicating with a daemon that uses a different RPC version. restore-deterministic-wallet restore-deterministic-wallet[=<1|0>] Recover wallet using mnemonic seed. restore-multisig-wallet restore-multisig-wallet[=<1|0>] Recover multisig wallet using seed. generate-new-wallet generate-new-wallet=<path> Generate new wallet and save it to a file set by the argument. ./aeon-wallet-cli --generate-new-wallet=/path/to/file/mynewwallet This will create two new files: mynewwallet and mynewwallet.keys create-address-file create-address-file=<path> Create an address file for new wallets. wallet-file wallet-file=<path> Use wallet file at path. generate-from-json generate-from-json=<path_to_json> Generate wallet from JSON format file with content. { \"version\": 1, \"filename\": \"aeonwallet\", \"scan_from_height\": 1796000, \"password\": \"pass\", \"seed\": \"some valid seed ...\" } generate-from-keys generate-from-keys=<path_to_new_wallet> Generate wallet from private keys electrum-seed electrum-seed=<seed> Specify Electrum seed for wallet recovery/creation. generate-from-spend-key generate-from-spend-key=<path_to_new_wallet> Generate deterministic wallet from spend key. generate-from-view-key generate-from-view-key=<path_to_new_wallet> Generate incoming-only wallet from view key. restore-height restore-height=<height> Restore from specific blockchain height. mnemonic-language mnemonic-language=<language> Language for mnemonic. wallet-non-deterministic wallet-non-deterministic[=<1|0>] Generate non-deterministic view and spend keys generate-from-multisig-keys generate-from-multisig-keys=<path_to_new_wallet> Generate a master wallet from multisig wallet keys. password password=<password> Wallet password (escape/quote as needed). password-file password-file=<path> Wallet password file. shared-ringdb-dir shared-ringdb-dir=<path> Set shared ring database path. use-english-language-names use-english-language-names[=<1|0>] Display English language names. kdf-rounds kdf-rounds=<number-of-rounds> Number of rounds for the key derivation function. max-concurrency max-concurrency=<number_of_cpu_threads> Set maximum number of CPU threads used by the daemon process for syncronizing blocks and processing transactions. tx-notify tx-notify=<path> Run a program for each new incoming transaction, '%s' will be replaced by the transaction hash. stagenet stagenet[=<1|0>] Run on stagenet. The daemon must be launched with --stagenet flag. subaddress-lookahead subaddress-lookahead=<num_accounts>:<num_subaddresses> When pair with a new wallet, creates a lookup table of num_accounts each with num_subaddresses . In total, num_accounts * num_subaddresses addresses. testnet testnet[=<1|0>] Run on testnet. The daemon must be launched with --testnet flag. version version Output version information.","title":"Options"},{"location":"documentation/wallet-cli/options/#wallet-cli","text":"","title":"Wallet CLI"},{"location":"documentation/wallet-cli/options/#usage","text":"./aeon-wallet-cli [options] [commands]","title":"Usage"},{"location":"documentation/wallet-cli/options/#description","text":"This is the command line Aeon wallet. It is a tool to manage aeon transfers and addresses. It needs to connect to an Aeon daemon to work correctly.","title":"Description"},{"location":"documentation/wallet-cli/options/#options","text":"","title":"Options"},{"location":"documentation/wallet-cli/options/#config-file","text":"config-file=<path> Specify a config file to load options from. An example config file is shown below. # /path/to/file/aeond.conf daemon-address=192.168.0.1:9149 daemon-login=user:rpcpassword trusted-daemon=1 password=walletpassword Then launch wallet-cli with the following command: ./aeond --config-file=/path/to/file/aeond.conf","title":"config-file"},{"location":"documentation/wallet-cli/options/#help","text":"help Produce a help message with this list available options.","title":"help"},{"location":"documentation/wallet-cli/options/#log-file","text":"log-file=<path> The path to be used for the log file. Default argument: aeon-wallet-cli.log","title":"log-file"},{"location":"documentation/wallet-cli/options/#max-log-file-size","text":"max-log-file-size=<bytes> Maximum log file size in bytes. Default argument: 104850000","title":"max-log-file-size"},{"location":"documentation/wallet-cli/options/#max-log-files","text":"max-log-files=<number> Maximum number of rotated log files to be saved (no limit by setting to 0). Default argument: 50","title":"max-log-files"},{"location":"documentation/wallet-cli/options/#log-level","text":"log-level=<level|category> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example --log-level=3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example --log-level=net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels.","title":"log-level"},{"location":"documentation/wallet-cli/options/#daemon-address","text":"daemon-address=<ip_address>:<port> Use aeon daemon at ip-address:port. --daemon-address=192.168.0.1:9149","title":"daemon-address"},{"location":"documentation/wallet-cli/options/#daemon-host","text":"daemon-host=<ip_address> Use daemon instance at specific IP address instead of localhost. --daemon-host=192.168.0.1","title":"daemon-host"},{"location":"documentation/wallet-cli/options/#daemon-login","text":"daemon-login=<username>[:<password>] username:password or username credentials for daemon RPC client.","title":"daemon-login"},{"location":"documentation/wallet-cli/options/#do-not-relay","text":"do-not-relay[=<1|0>] Newly created transactions received by this daemon will not be relayed to the Aeon network. Default argument: 0","title":"do-not-relay"},{"location":"documentation/wallet-cli/options/#daemon-port","text":"daemon-port=<port> Use daemon instance at specified port. Default argument: 11181","title":"daemon-port"},{"location":"documentation/wallet-cli/options/#trusted-daemon","text":"trusted-daemon[=<1|0>] Enable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default.","title":"trusted-daemon"},{"location":"documentation/wallet-cli/options/#untrusted-daemon","text":"untrusted-daemon[=<1|0>] Disable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default.","title":"untrusted-daemon"},{"location":"documentation/wallet-cli/options/#allow-mismatched-daemon-version","text":"allow-mismatched-daemon-version[=<1|0>] Allow communicating with a daemon that uses a different RPC version.","title":"allow-mismatched-daemon-version"},{"location":"documentation/wallet-cli/options/#restore-deterministic-wallet","text":"restore-deterministic-wallet[=<1|0>] Recover wallet using mnemonic seed.","title":"restore-deterministic-wallet"},{"location":"documentation/wallet-cli/options/#restore-multisig-wallet","text":"restore-multisig-wallet[=<1|0>] Recover multisig wallet using seed.","title":"restore-multisig-wallet"},{"location":"documentation/wallet-cli/options/#generate-new-wallet","text":"generate-new-wallet=<path> Generate new wallet and save it to a file set by the argument. ./aeon-wallet-cli --generate-new-wallet=/path/to/file/mynewwallet This will create two new files: mynewwallet and mynewwallet.keys","title":"generate-new-wallet"},{"location":"documentation/wallet-cli/options/#create-address-file","text":"create-address-file=<path> Create an address file for new wallets.","title":"create-address-file"},{"location":"documentation/wallet-cli/options/#wallet-file","text":"wallet-file=<path> Use wallet file at path.","title":"wallet-file"},{"location":"documentation/wallet-cli/options/#generate-from-json","text":"generate-from-json=<path_to_json> Generate wallet from JSON format file with content. { \"version\": 1, \"filename\": \"aeonwallet\", \"scan_from_height\": 1796000, \"password\": \"pass\", \"seed\": \"some valid seed ...\" }","title":"generate-from-json"},{"location":"documentation/wallet-cli/options/#generate-from-keys","text":"generate-from-keys=<path_to_new_wallet> Generate wallet from private keys","title":"generate-from-keys"},{"location":"documentation/wallet-cli/options/#electrum-seed","text":"electrum-seed=<seed> Specify Electrum seed for wallet recovery/creation.","title":"electrum-seed"},{"location":"documentation/wallet-cli/options/#generate-from-spend-key","text":"generate-from-spend-key=<path_to_new_wallet> Generate deterministic wallet from spend key.","title":"generate-from-spend-key"},{"location":"documentation/wallet-cli/options/#generate-from-view-key","text":"generate-from-view-key=<path_to_new_wallet> Generate incoming-only wallet from view key.","title":"generate-from-view-key"},{"location":"documentation/wallet-cli/options/#restore-height","text":"restore-height=<height> Restore from specific blockchain height.","title":"restore-height"},{"location":"documentation/wallet-cli/options/#mnemonic-language","text":"mnemonic-language=<language> Language for mnemonic.","title":"mnemonic-language"},{"location":"documentation/wallet-cli/options/#wallet-non-deterministic","text":"wallet-non-deterministic[=<1|0>] Generate non-deterministic view and spend keys","title":"wallet-non-deterministic"},{"location":"documentation/wallet-cli/options/#generate-from-multisig-keys","text":"generate-from-multisig-keys=<path_to_new_wallet> Generate a master wallet from multisig wallet keys.","title":"generate-from-multisig-keys"},{"location":"documentation/wallet-cli/options/#password","text":"password=<password> Wallet password (escape/quote as needed).","title":"password"},{"location":"documentation/wallet-cli/options/#password-file","text":"password-file=<path> Wallet password file.","title":"password-file"},{"location":"documentation/wallet-cli/options/#shared-ringdb-dir","text":"shared-ringdb-dir=<path> Set shared ring database path.","title":"shared-ringdb-dir"},{"location":"documentation/wallet-cli/options/#use-english-language-names","text":"use-english-language-names[=<1|0>] Display English language names.","title":"use-english-language-names"},{"location":"documentation/wallet-cli/options/#kdf-rounds","text":"kdf-rounds=<number-of-rounds> Number of rounds for the key derivation function.","title":"kdf-rounds"},{"location":"documentation/wallet-cli/options/#max-concurrency","text":"max-concurrency=<number_of_cpu_threads> Set maximum number of CPU threads used by the daemon process for syncronizing blocks and processing transactions.","title":"max-concurrency"},{"location":"documentation/wallet-cli/options/#tx-notify","text":"tx-notify=<path> Run a program for each new incoming transaction, '%s' will be replaced by the transaction hash.","title":"tx-notify"},{"location":"documentation/wallet-cli/options/#stagenet","text":"stagenet[=<1|0>] Run on stagenet. The daemon must be launched with --stagenet flag.","title":"stagenet"},{"location":"documentation/wallet-cli/options/#subaddress-lookahead","text":"subaddress-lookahead=<num_accounts>:<num_subaddresses> When pair with a new wallet, creates a lookup table of num_accounts each with num_subaddresses . In total, num_accounts * num_subaddresses addresses.","title":"subaddress-lookahead"},{"location":"documentation/wallet-cli/options/#testnet","text":"testnet[=<1|0>] Run on testnet. The daemon must be launched with --testnet flag.","title":"testnet"},{"location":"documentation/wallet-cli/options/#version","text":"version Output version information.","title":"version"},{"location":"documentation/wallet-rpc/commands/","text":"Wallet RPC Usage ./aeon-wallet-rpc [options] Description This allows one to interact with a wallet through HTTP requests. Commands get_balance request uint32_t account_index; std::set<uint32_t> address_indices; per_subaddress_info uint32_t address_index; std::string address; uint64_t balance; uint64_t unlocked_balance; std::string label; uint64_t num_unspent_outputs; uint64_t blocks_to_unlock; response uint64_t balance; uint64_t unlocked_balance; bool multisig_import_needed; std::vector<per_subaddress_info> per_subaddress; uint64_t blocks_to_unlock; get_address request uint32_t account_index; std::vector<uint32_t> address_index; address_info std::string address; std::string label; uint32_t address_index; bool used; response std::string address; std::vector<address_info> addresses; get_address_index request std::string address; response cryptonote::subaddress_index index; create_address request uint32_t account_index; std::string label; response std::string address; uint32_t address_index; label_address request cryptonote::subaddress_index index; std::string label; response get_accounts request std::string tag; // all accounts if empty, otherwise those accounts with this tag subaddress_account_info uint32_t account_index; std::string base_address; uint64_t balance; uint64_t unlocked_balance; std::string label; std::string tag; response uint64_t total_balance; uint64_t total_unlocked_balance; std::vector<subaddress_account_info> subaddress_accounts; create_account request std::string label; response uint32_t account_index; std::string address; // the 0-th address for convenience label_account request uint32_t account_index; std::string label; response get_account_tags request account_tag_info std::string tag; std::string label; std::vector<uint32_t> accounts; response std::vector<account_tag_info> account_tags; tag_accounts request std::string tag; std::set<uint32_t> accounts; response untag_accounts request std::set<uint32_t> accounts; response set_account_tag_description request std::string tag; std::string description; response get_height request response uint64_t height; transfer transfer_destination uint64_t amount; std::string address; request std::list<transfer_destination> destinations; uint32_t account_index; std::set<uint32_t> subaddr_indices; uint32_t priority; uint64_t mixin; uint64_t ring_size; uint64_t unlock_time; std::string payment_id; bool get_tx_key; bool do_not_relay; bool get_tx_hex; bool get_tx_metadata; response std::string tx_hash; std::string tx_key; uint64_t amount; uint64_t fee; std::string tx_blob; std::string tx_metadata; std::string multisig_txset; std::string unsigned_txset; transfer_split request std::list<transfer_destination> destinations; uint32_t account_index; std::set<uint32_t> subaddr_indices; uint32_t priority; uint64_t mixin; uint64_t ring_size; uint64_t unlock_time; std::string payment_id; bool get_tx_keys; bool do_not_relay; bool get_tx_hex; bool get_tx_metadata; key_list std::list<std::string> keys; response std::list<std::string> tx_hash_list; std::list<std::string> tx_key_list; std::list<uint64_t> amount_list; std::list<uint64_t> fee_list; std::list<std::string> tx_blob_list; std::list<std::string> tx_metadata_list; std::string multisig_txset; std::string unsigned_txset; sign_transfer request std::string unsigned_txset; bool export_raw; response std::string signed_txset; std::list<std::string> tx_hash_list; std::list<std::string> tx_raw_list; submit_transfer request std::string tx_data_hex; response std::list<std::string> tx_hash_list; sweep_dust request bool get_tx_keys; bool do_not_relay; bool get_tx_hex; bool get_tx_metadata; key_list std::list<std::string> keys; response std::list<std::string> tx_hash_list; std::list<std::string> tx_key_list; std::list<uint64_t> amount_list; std::list<uint64_t> fee_list; std::list<std::string> tx_blob_list; std::list<std::string> tx_metadata_list; std::string multisig_txset; std::string unsigned_txset; sweep_all request std::string address; uint32_t account_index; std::set<uint32_t> subaddr_indices; uint32_t priority; uint64_t mixin; uint64_t ring_size; uint64_t unlock_time; std::string payment_id; bool get_tx_keys; uint64_t below_amount; bool do_not_relay; bool get_tx_hex; bool get_tx_metadata; key_list std::list<std::string> keys; response std::list<std::string> tx_hash_list; std::list<std::string> tx_key_list; std::list<uint64_t> amount_list; std::list<uint64_t> fee_list; std::list<std::string> tx_blob_list; std::list<std::string> tx_metadata_list; std::string multisig_txset; std::string unsigned_txset; sweep_single request std::string address; uint32_t priority; uint64_t mixin; uint64_t ring_size; uint64_t unlock_time; std::string payment_id; bool get_tx_key; std::string key_image; bool do_not_relay; bool get_tx_hex; bool get_tx_metadata; response std::string tx_hash; std::string tx_key; uint64_t amount; uint64_t fee; std::string tx_blob; std::string tx_metadata; std::string multisig_txset; std::string unsigned_txset; relay_tx request std::string hex; response std::string tx_hash; store request response get_payments request std::string payment_id; payment_details std::string payment_id; std::string tx_hash; uint64_t amount; uint64_t block_height; uint64_t unlock_time; cryptonote::subaddress_index subaddr_index; std::string address; response std::list<payment_details> payments; get_bulk_payments request std::vector<std::string> payment_ids; uint64_t min_block_height; response std::list<payment_details> payments; incoming_transfers request std::string transfer_type; uint32_t account_index; std::set<uint32_t> subaddr_indices; transfer_details uint64_t amount; bool spent; uint64_t global_index; std::string tx_hash; cryptonote::subaddress_index subaddr_index; std::string key_image; response std::list<transfer_details> transfers; query_key request std::string key_type; response std::string key; make_integrated_address request std::string standard_address; std::string payment_id; response std::string integrated_address; std::string payment_id; split_integrated_address request std::string integrated_address; response std::string standard_address; std::string payment_id; bool is_subaddress; stop_wallet request response rescan_blockchain request response set_tx_notes request std::list<std::string> txids; std::list<std::string> notes; response get_tx_notes request std::list<std::string> txids; response std::list<std::string> notes; set_attribute request std::string key; std::string value; response get_attribute request std::string key; response std::string value; get_tx_key request std::string txid; response std::string tx_key; check_tx_key request std::string txid; std::string tx_key; std::string address; response uint64_t received; bool in_pool; uint64_t confirmations; get_tx_proof request std::string txid; std::string address; std::string message; response std::string signature; check_tx_proof request std::string txid; std::string address; std::string message; std::string signature; response bool good; uint64_t received; bool in_pool; uint64_t confirmations; get_spend_proof request std::string txid; std::string message; response std::string signature; check_spend_proof request std::string txid; std::string message; std::string signature; response bool good; get_reserve_proof request bool all; uint32_t account_index; // ignored when `all` is true uint64_t amount; // ignored when `all` is true std::string message; response std::string signature; check_reserve_proof request std::string address; std::string message; std::string signature; response bool good; uint64_t total; uint64_t spent; get_transfers request bool in; bool out; bool pending; bool failed; bool pool; bool filter_by_height; uint64_t min_height; uint64_t max_height; uint32_t account_index; std::set<uint32_t> subaddr_indices; transfer_entry std::string txid; std::string payment_id; uint64_t height; uint64_t timestamp; uint64_t amount; uint64_t fee; std::string note; std::list<transfer_destination> destinations; std::string type; uint64_t unlock_time; cryptonote::subaddress_index subaddr_index; std::vector<cryptonote::subaddress_index> subaddr_indices; std::string address; bool double_spend_seen; uint64_t confirmations; uint64_t suggested_confirmations_threshold; response std::list<transfer_entry> in; std::list<transfer_entry> out; std::list<transfer_entry> pending; std::list<transfer_entry> failed; std::list<transfer_entry> pool; get_transfer_by_txid request std::string txid; uint32_t account_index; response transfer_entry transfer; std::list<transfer_entry> transfers; sign request std::string data; response std::string signature; verify request std::string data; std::string address; std::string signature; response bool good; export_outputs request response std::string outputs_data_hex; import_outputs request std::string outputs_data_hex; response uint64_t num_imported; export_key_images request signed_key_image std::string key_image; std::string signature; response std::vector<signed_key_image> signed_key_images; import_key_images signed_key_image std::string key_image; std::string signature; request std::vector<signed_key_image> signed_key_images; response uint64_t height; uint64_t spent; uint64_t unspent; make_uri uri_spec std::string address; std::string payment_id; uint64_t amount; std::string tx_description; std::string recipient_name; request public uri_spec response std::string uri; parse_uri request std::string uri; response uri_spec uri; std::vector<std::string> unknown_parameters; add_address_book_entry request std::string address; std::string payment_id; std::string description; response uint64_t index; get_address_book_entry request std::list<uint64_t> entries; entry uint64_t index; std::string address; std::string payment_id; std::string description; response std::vector<entry> entries; delete_address_book_entry request uint64_t index; response rescan_spent request response refresh request uint64_t start_height; response uint64_t blocks_fetched; bool received_money; start_mining request uint64_t threads_count; bool do_background_mining; bool ignore_battery; response stop_mining request response get_languages request response std::vector<std::string> languages; create_wallet request std::string filename; std::string password; std::string language; response open_wallet request std::string filename; std::string password; response close_wallet request response change_wallet_password request std::string old_password; std::string new_password; response generate_from_keys request uint64_t restore_height; std::string filename; std::string address; std::string spendkey; std::string viewkey; std::string password; response std::string address; std::string info; restore_deterministic_wallet request uint64_t restore_height; std::string filename; std::string seed; std::string seed_offset; std::string password; std::string language; response std::string address; std::string seed; std::string info; bool was_deprecated; is_multisig request response bool multisig; bool ready; uint32_t threshold; uint32_t total; prepare_multisig request response std::string multisig_info; make_multisig request std::vector<std::string> multisig_info; uint32_t threshold; std::string password; response std::string address; std::string multisig_info; export_multisig request response std::string info;``` ### `import_multisig` * request std::vector info;``` * response uint64_t n_outputs; finalize_multisig request std::string password; std::vector<std::string> multisig_info; response std::string address; exchange_multisig_keys request std::string password; std::vector<std::string> multisig_info; response std::string address; std::string multisig_info; sign_multisig request std::string tx_data_hex; response std::string tx_data_hex; std::list<std::string> tx_hash_list; submit_multisig request std::string tx_data_hex; response std::list<std::string> tx_hash_list; get_version request response uint32_t version; validate_address request std::string address; bool any_net_type; bool allow_openalias; response bool valid; bool integrated; bool subaddress; std::string nettype; std::string openalias_address; set_daemon request std::string address; bool trusted; bool ssl; #if 0 // to be enabled when ssl support is added std::string ssl_support; // disabled, enabled, autodetect std::string ssl_private_key_path; std::string ssl_certificate_path; std::list<std::string> ssl_allowed_certificates; std::vector<std::string> ssl_allowed_fingerprints; bool ssl_allow_any_cert; #endif #if 0 // to be enabled when ssl support is added #endif response set_log_level request int8_t level; response set_log_categories request std::string categories; response std::string categories;","title":"Commands"},{"location":"documentation/wallet-rpc/commands/#wallet-rpc","text":"","title":"Wallet RPC"},{"location":"documentation/wallet-rpc/commands/#usage","text":"./aeon-wallet-rpc [options]","title":"Usage"},{"location":"documentation/wallet-rpc/commands/#description","text":"This allows one to interact with a wallet through HTTP requests.","title":"Description"},{"location":"documentation/wallet-rpc/commands/#commands","text":"","title":"Commands"},{"location":"documentation/wallet-rpc/commands/#get_balance","text":"request uint32_t account_index; std::set<uint32_t> address_indices; per_subaddress_info uint32_t address_index; std::string address; uint64_t balance; uint64_t unlocked_balance; std::string label; uint64_t num_unspent_outputs; uint64_t blocks_to_unlock; response uint64_t balance; uint64_t unlocked_balance; bool multisig_import_needed; std::vector<per_subaddress_info> per_subaddress; uint64_t blocks_to_unlock;","title":"get_balance"},{"location":"documentation/wallet-rpc/commands/#get_address","text":"request uint32_t account_index; std::vector<uint32_t> address_index; address_info std::string address; std::string label; uint32_t address_index; bool used; response std::string address; std::vector<address_info> addresses;","title":"get_address"},{"location":"documentation/wallet-rpc/commands/#get_address_index","text":"request std::string address; response cryptonote::subaddress_index index;","title":"get_address_index"},{"location":"documentation/wallet-rpc/commands/#create_address","text":"request uint32_t account_index; std::string label; response std::string address; uint32_t address_index;","title":"create_address"},{"location":"documentation/wallet-rpc/commands/#label_address","text":"request cryptonote::subaddress_index index; std::string label; response","title":"label_address"},{"location":"documentation/wallet-rpc/commands/#get_accounts","text":"request std::string tag; // all accounts if empty, otherwise those accounts with this tag subaddress_account_info uint32_t account_index; std::string base_address; uint64_t balance; uint64_t unlocked_balance; std::string label; std::string tag; response uint64_t total_balance; uint64_t total_unlocked_balance; std::vector<subaddress_account_info> subaddress_accounts;","title":"get_accounts"},{"location":"documentation/wallet-rpc/commands/#create_account","text":"request std::string label; response uint32_t account_index; std::string address; // the 0-th address for convenience","title":"create_account"},{"location":"documentation/wallet-rpc/commands/#label_account","text":"request uint32_t account_index; std::string label; response","title":"label_account"},{"location":"documentation/wallet-rpc/commands/#get_account_tags","text":"request account_tag_info std::string tag; std::string label; std::vector<uint32_t> accounts; response std::vector<account_tag_info> account_tags;","title":"get_account_tags"},{"location":"documentation/wallet-rpc/commands/#tag_accounts","text":"request std::string tag; std::set<uint32_t> accounts; response","title":"tag_accounts"},{"location":"documentation/wallet-rpc/commands/#untag_accounts","text":"request std::set<uint32_t> accounts; response","title":"untag_accounts"},{"location":"documentation/wallet-rpc/commands/#set_account_tag_description","text":"request std::string tag; std::string description; response","title":"set_account_tag_description"},{"location":"documentation/wallet-rpc/commands/#get_height","text":"request response uint64_t height;","title":"get_height"},{"location":"documentation/wallet-rpc/commands/#transfer","text":"transfer_destination uint64_t amount; std::string address; request std::list<transfer_destination> destinations; uint32_t account_index; std::set<uint32_t> subaddr_indices; uint32_t priority; uint64_t mixin; uint64_t ring_size; uint64_t unlock_time; std::string payment_id; bool get_tx_key; bool do_not_relay; bool get_tx_hex; bool get_tx_metadata; response std::string tx_hash; std::string tx_key; uint64_t amount; uint64_t fee; std::string tx_blob; std::string tx_metadata; std::string multisig_txset; std::string unsigned_txset;","title":"transfer"},{"location":"documentation/wallet-rpc/commands/#transfer_split","text":"request std::list<transfer_destination> destinations; uint32_t account_index; std::set<uint32_t> subaddr_indices; uint32_t priority; uint64_t mixin; uint64_t ring_size; uint64_t unlock_time; std::string payment_id; bool get_tx_keys; bool do_not_relay; bool get_tx_hex; bool get_tx_metadata; key_list std::list<std::string> keys; response std::list<std::string> tx_hash_list; std::list<std::string> tx_key_list; std::list<uint64_t> amount_list; std::list<uint64_t> fee_list; std::list<std::string> tx_blob_list; std::list<std::string> tx_metadata_list; std::string multisig_txset; std::string unsigned_txset;","title":"transfer_split"},{"location":"documentation/wallet-rpc/commands/#sign_transfer","text":"request std::string unsigned_txset; bool export_raw; response std::string signed_txset; std::list<std::string> tx_hash_list; std::list<std::string> tx_raw_list;","title":"sign_transfer"},{"location":"documentation/wallet-rpc/commands/#submit_transfer","text":"request std::string tx_data_hex; response std::list<std::string> tx_hash_list;","title":"submit_transfer"},{"location":"documentation/wallet-rpc/commands/#sweep_dust","text":"request bool get_tx_keys; bool do_not_relay; bool get_tx_hex; bool get_tx_metadata; key_list std::list<std::string> keys; response std::list<std::string> tx_hash_list; std::list<std::string> tx_key_list; std::list<uint64_t> amount_list; std::list<uint64_t> fee_list; std::list<std::string> tx_blob_list; std::list<std::string> tx_metadata_list; std::string multisig_txset; std::string unsigned_txset;","title":"sweep_dust"},{"location":"documentation/wallet-rpc/commands/#sweep_all","text":"request std::string address; uint32_t account_index; std::set<uint32_t> subaddr_indices; uint32_t priority; uint64_t mixin; uint64_t ring_size; uint64_t unlock_time; std::string payment_id; bool get_tx_keys; uint64_t below_amount; bool do_not_relay; bool get_tx_hex; bool get_tx_metadata; key_list std::list<std::string> keys; response std::list<std::string> tx_hash_list; std::list<std::string> tx_key_list; std::list<uint64_t> amount_list; std::list<uint64_t> fee_list; std::list<std::string> tx_blob_list; std::list<std::string> tx_metadata_list; std::string multisig_txset; std::string unsigned_txset;","title":"sweep_all"},{"location":"documentation/wallet-rpc/commands/#sweep_single","text":"request std::string address; uint32_t priority; uint64_t mixin; uint64_t ring_size; uint64_t unlock_time; std::string payment_id; bool get_tx_key; std::string key_image; bool do_not_relay; bool get_tx_hex; bool get_tx_metadata; response std::string tx_hash; std::string tx_key; uint64_t amount; uint64_t fee; std::string tx_blob; std::string tx_metadata; std::string multisig_txset; std::string unsigned_txset;","title":"sweep_single"},{"location":"documentation/wallet-rpc/commands/#relay_tx","text":"request std::string hex; response std::string tx_hash;","title":"relay_tx"},{"location":"documentation/wallet-rpc/commands/#store","text":"request response","title":"store"},{"location":"documentation/wallet-rpc/commands/#get_payments","text":"request std::string payment_id; payment_details std::string payment_id; std::string tx_hash; uint64_t amount; uint64_t block_height; uint64_t unlock_time; cryptonote::subaddress_index subaddr_index; std::string address; response std::list<payment_details> payments;","title":"get_payments"},{"location":"documentation/wallet-rpc/commands/#get_bulk_payments","text":"request std::vector<std::string> payment_ids; uint64_t min_block_height; response std::list<payment_details> payments;","title":"get_bulk_payments"},{"location":"documentation/wallet-rpc/commands/#incoming_transfers","text":"request std::string transfer_type; uint32_t account_index; std::set<uint32_t> subaddr_indices; transfer_details uint64_t amount; bool spent; uint64_t global_index; std::string tx_hash; cryptonote::subaddress_index subaddr_index; std::string key_image; response std::list<transfer_details> transfers;","title":"incoming_transfers"},{"location":"documentation/wallet-rpc/commands/#query_key","text":"request std::string key_type; response std::string key;","title":"query_key"},{"location":"documentation/wallet-rpc/commands/#make_integrated_address","text":"request std::string standard_address; std::string payment_id; response std::string integrated_address; std::string payment_id;","title":"make_integrated_address"},{"location":"documentation/wallet-rpc/commands/#split_integrated_address","text":"request std::string integrated_address; response std::string standard_address; std::string payment_id; bool is_subaddress;","title":"split_integrated_address"},{"location":"documentation/wallet-rpc/commands/#stop_wallet","text":"request response","title":"stop_wallet"},{"location":"documentation/wallet-rpc/commands/#rescan_blockchain","text":"request response","title":"rescan_blockchain"},{"location":"documentation/wallet-rpc/commands/#set_tx_notes","text":"request std::list<std::string> txids; std::list<std::string> notes; response","title":"set_tx_notes"},{"location":"documentation/wallet-rpc/commands/#get_tx_notes","text":"request std::list<std::string> txids; response std::list<std::string> notes;","title":"get_tx_notes"},{"location":"documentation/wallet-rpc/commands/#set_attribute","text":"request std::string key; std::string value; response","title":"set_attribute"},{"location":"documentation/wallet-rpc/commands/#get_attribute","text":"request std::string key; response std::string value;","title":"get_attribute"},{"location":"documentation/wallet-rpc/commands/#get_tx_key","text":"request std::string txid; response std::string tx_key;","title":"get_tx_key"},{"location":"documentation/wallet-rpc/commands/#check_tx_key","text":"request std::string txid; std::string tx_key; std::string address; response uint64_t received; bool in_pool; uint64_t confirmations;","title":"check_tx_key"},{"location":"documentation/wallet-rpc/commands/#get_tx_proof","text":"request std::string txid; std::string address; std::string message; response std::string signature;","title":"get_tx_proof"},{"location":"documentation/wallet-rpc/commands/#check_tx_proof","text":"request std::string txid; std::string address; std::string message; std::string signature; response bool good; uint64_t received; bool in_pool; uint64_t confirmations;","title":"check_tx_proof"},{"location":"documentation/wallet-rpc/commands/#get_spend_proof","text":"request std::string txid; std::string message; response std::string signature;","title":"get_spend_proof"},{"location":"documentation/wallet-rpc/commands/#check_spend_proof","text":"request std::string txid; std::string message; std::string signature; response bool good;","title":"check_spend_proof"},{"location":"documentation/wallet-rpc/commands/#get_reserve_proof","text":"request bool all; uint32_t account_index; // ignored when `all` is true uint64_t amount; // ignored when `all` is true std::string message; response std::string signature;","title":"get_reserve_proof"},{"location":"documentation/wallet-rpc/commands/#check_reserve_proof","text":"request std::string address; std::string message; std::string signature; response bool good; uint64_t total; uint64_t spent;","title":"check_reserve_proof"},{"location":"documentation/wallet-rpc/commands/#get_transfers","text":"request bool in; bool out; bool pending; bool failed; bool pool; bool filter_by_height; uint64_t min_height; uint64_t max_height; uint32_t account_index; std::set<uint32_t> subaddr_indices; transfer_entry std::string txid; std::string payment_id; uint64_t height; uint64_t timestamp; uint64_t amount; uint64_t fee; std::string note; std::list<transfer_destination> destinations; std::string type; uint64_t unlock_time; cryptonote::subaddress_index subaddr_index; std::vector<cryptonote::subaddress_index> subaddr_indices; std::string address; bool double_spend_seen; uint64_t confirmations; uint64_t suggested_confirmations_threshold; response std::list<transfer_entry> in; std::list<transfer_entry> out; std::list<transfer_entry> pending; std::list<transfer_entry> failed; std::list<transfer_entry> pool;","title":"get_transfers"},{"location":"documentation/wallet-rpc/commands/#get_transfer_by_txid","text":"request std::string txid; uint32_t account_index; response transfer_entry transfer; std::list<transfer_entry> transfers;","title":"get_transfer_by_txid"},{"location":"documentation/wallet-rpc/commands/#sign","text":"request std::string data; response std::string signature;","title":"sign"},{"location":"documentation/wallet-rpc/commands/#verify","text":"request std::string data; std::string address; std::string signature; response bool good;","title":"verify"},{"location":"documentation/wallet-rpc/commands/#export_outputs","text":"request response std::string outputs_data_hex;","title":"export_outputs"},{"location":"documentation/wallet-rpc/commands/#import_outputs","text":"request std::string outputs_data_hex; response uint64_t num_imported;","title":"import_outputs"},{"location":"documentation/wallet-rpc/commands/#export_key_images","text":"request signed_key_image std::string key_image; std::string signature; response std::vector<signed_key_image> signed_key_images;","title":"export_key_images"},{"location":"documentation/wallet-rpc/commands/#import_key_images","text":"signed_key_image std::string key_image; std::string signature; request std::vector<signed_key_image> signed_key_images; response uint64_t height; uint64_t spent; uint64_t unspent;","title":"import_key_images"},{"location":"documentation/wallet-rpc/commands/#make_uri","text":"uri_spec std::string address; std::string payment_id; uint64_t amount; std::string tx_description; std::string recipient_name; request public uri_spec response std::string uri;","title":"make_uri"},{"location":"documentation/wallet-rpc/commands/#parse_uri","text":"request std::string uri; response uri_spec uri; std::vector<std::string> unknown_parameters;","title":"parse_uri"},{"location":"documentation/wallet-rpc/commands/#add_address_book_entry","text":"request std::string address; std::string payment_id; std::string description; response uint64_t index;","title":"add_address_book_entry"},{"location":"documentation/wallet-rpc/commands/#get_address_book_entry","text":"request std::list<uint64_t> entries; entry uint64_t index; std::string address; std::string payment_id; std::string description; response std::vector<entry> entries;","title":"get_address_book_entry"},{"location":"documentation/wallet-rpc/commands/#delete_address_book_entry","text":"request uint64_t index; response","title":"delete_address_book_entry"},{"location":"documentation/wallet-rpc/commands/#rescan_spent","text":"request response","title":"rescan_spent"},{"location":"documentation/wallet-rpc/commands/#refresh","text":"request uint64_t start_height; response uint64_t blocks_fetched; bool received_money;","title":"refresh"},{"location":"documentation/wallet-rpc/commands/#start_mining","text":"request uint64_t threads_count; bool do_background_mining; bool ignore_battery; response","title":"start_mining"},{"location":"documentation/wallet-rpc/commands/#stop_mining","text":"request response","title":"stop_mining"},{"location":"documentation/wallet-rpc/commands/#get_languages","text":"request response std::vector<std::string> languages;","title":"get_languages"},{"location":"documentation/wallet-rpc/commands/#create_wallet","text":"request std::string filename; std::string password; std::string language; response","title":"create_wallet"},{"location":"documentation/wallet-rpc/commands/#open_wallet","text":"request std::string filename; std::string password; response","title":"open_wallet"},{"location":"documentation/wallet-rpc/commands/#close_wallet","text":"request response","title":"close_wallet"},{"location":"documentation/wallet-rpc/commands/#change_wallet_password","text":"request std::string old_password; std::string new_password; response","title":"change_wallet_password"},{"location":"documentation/wallet-rpc/commands/#generate_from_keys","text":"request uint64_t restore_height; std::string filename; std::string address; std::string spendkey; std::string viewkey; std::string password; response std::string address; std::string info;","title":"generate_from_keys"},{"location":"documentation/wallet-rpc/commands/#restore_deterministic_wallet","text":"request uint64_t restore_height; std::string filename; std::string seed; std::string seed_offset; std::string password; std::string language; response std::string address; std::string seed; std::string info; bool was_deprecated;","title":"restore_deterministic_wallet"},{"location":"documentation/wallet-rpc/commands/#is_multisig","text":"request response bool multisig; bool ready; uint32_t threshold; uint32_t total;","title":"is_multisig"},{"location":"documentation/wallet-rpc/commands/#prepare_multisig","text":"request response std::string multisig_info;","title":"prepare_multisig"},{"location":"documentation/wallet-rpc/commands/#make_multisig","text":"request std::vector<std::string> multisig_info; uint32_t threshold; std::string password; response std::string address; std::string multisig_info;","title":"make_multisig"},{"location":"documentation/wallet-rpc/commands/#export_multisig","text":"request response std::string info;``` ### `import_multisig` * request std::vector info;``` * response uint64_t n_outputs;","title":"export_multisig"},{"location":"documentation/wallet-rpc/commands/#finalize_multisig","text":"request std::string password; std::vector<std::string> multisig_info; response std::string address;","title":"finalize_multisig"},{"location":"documentation/wallet-rpc/commands/#exchange_multisig_keys","text":"request std::string password; std::vector<std::string> multisig_info; response std::string address; std::string multisig_info;","title":"exchange_multisig_keys"},{"location":"documentation/wallet-rpc/commands/#sign_multisig","text":"request std::string tx_data_hex; response std::string tx_data_hex; std::list<std::string> tx_hash_list;","title":"sign_multisig"},{"location":"documentation/wallet-rpc/commands/#submit_multisig","text":"request std::string tx_data_hex; response std::list<std::string> tx_hash_list;","title":"submit_multisig"},{"location":"documentation/wallet-rpc/commands/#get_version","text":"request response uint32_t version;","title":"get_version"},{"location":"documentation/wallet-rpc/commands/#validate_address","text":"request std::string address; bool any_net_type; bool allow_openalias; response bool valid; bool integrated; bool subaddress; std::string nettype; std::string openalias_address;","title":"validate_address"},{"location":"documentation/wallet-rpc/commands/#set_daemon","text":"request std::string address; bool trusted; bool ssl; #if 0 // to be enabled when ssl support is added std::string ssl_support; // disabled, enabled, autodetect std::string ssl_private_key_path; std::string ssl_certificate_path; std::list<std::string> ssl_allowed_certificates; std::vector<std::string> ssl_allowed_fingerprints; bool ssl_allow_any_cert; #endif #if 0 // to be enabled when ssl support is added #endif response","title":"set_daemon"},{"location":"documentation/wallet-rpc/commands/#set_log_level","text":"request int8_t level; response","title":"set_log_level"},{"location":"documentation/wallet-rpc/commands/#set_log_categories","text":"request std::string categories; response std::string categories;","title":"set_log_categories"},{"location":"documentation/wallet-rpc/options/","text":"Wallet RPC Usage ./aeon-wallet-rpc [options] Description This allows one to interact with a wallet through HTTP requests. Options config-file config-file=<path> Specify a config file to load options from. An example config file is shown below. # /path/to/file/aeond.conf daemon-address=192.168.0.1:9149 daemon-login=user:rpcpassword trusted-daemon=1 password=walletpassword Then launch wallet-cli with the following command: ./aeond --config-file=/path/to/file/aeond.conf help help Produce a help message with this list available options. log-file log-file=<path> The path to be used for the log file. Default argument: aeon-wallet-cli.log max-log-file-size max-log-file-size=<bytes> Maximum log file size in bytes. Default argument: 104850000 max-log-files max-log-files=<number> Maximum number of rotated log files to be saved (no limit by setting to 0). Default argument: 50 log-level log-level=<level|category> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example --log-level=3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example --log-level=net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels. daemon-address daemon-address=<ip_address>:<port> Use aeon daemon at ip-address:port. --daemon-address=192.168.0.1:9149 daemon-host daemon-host=<ip_address> Use daemon instance at specific IP address instead of localhost. --daemon-host=192.168.0.1 confirm-external-bind confirm-external-bind[=<1|0>] Confirm ip value is NOT a loopback (local) IP. daemon-login daemon-login=<username>[:<password>] username:password or username credentials for daemon RPC client. daemon-port daemon-port=<port> Use daemon instance at specified port. Default argument: 11181 trusted-daemon trusted-daemon[=<1|0>] Enable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default. untrusted-daemon untrusted-daemon[=<1|0>] Disable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default. password password=<password> Wallet password (escape/quote as needed). password-file password-file=<path> Wallet password file. prompt-for-password prompt-for-password[=<1|0> Prompts for password when not provided. rpc-bind-ip rpc-bind-ip=<ip_address> Specify IP to bind RPC server. rpc-login rpc-login=<username>[:<password>] Specify username[:password] required for RPC server. disable-rpc-login disable-rpc-login[=<1|0> Disable HTTP authentication for RPC connections served by this process. rpc-access-control-origins rpc-access-control-origins=<list,of,comma,separated,urls> Specify a comma separated list of origins to allow cross origin resource sharing. rpc-bind-port rpc-bind-port=<port> Specify IP to bind RPC server. restricted-rpc restricted-rpc[=<1|0>] Restrict RPC to view only commands and do not return privacy sensitive data in RPC calls. wallet-dir wallet-dir=<path> Directory for newly created wallets. wallet-file wallet-file=<path> Use wallet file at path . generate-from-json generate-from-json=<path_to_json> Generate wallet from JSON format file. shared-ringdb-dir shared-ringdb-dir=<path> Set shared ring database path. detach detach[=<0|1>] Run as daemon. kdf-rounds kdf-rounds=<number-of-rounds> Number of rounds for the key derivation function. max-concurrency max-concurrency=<number_of_cpu_threads> Set maximum number of CPU threads used by the daemon process for syncronizing blocks and processing transactions. non-interactive non-interactive[=<0|1>] Run non-interactive tx-notify tx-notify=<path> Run a program for each new incoming transaction, '%s' will be replaced by the transaction hash. pidfile pidfile=<path_to_file> File path to write the rpc's PID to (optional, requires --detach). stagenet stagenet[=<1|0>] Run on stagenet. The daemon must be launched with --stagenet flag. testnet testnet[=<1|0>] Run on testnet. The daemon must be launched with --testnet flag. version version Output version information.","title":"Options"},{"location":"documentation/wallet-rpc/options/#wallet-rpc","text":"","title":"Wallet RPC"},{"location":"documentation/wallet-rpc/options/#usage","text":"./aeon-wallet-rpc [options]","title":"Usage"},{"location":"documentation/wallet-rpc/options/#description","text":"This allows one to interact with a wallet through HTTP requests.","title":"Description"},{"location":"documentation/wallet-rpc/options/#options","text":"","title":"Options"},{"location":"documentation/wallet-rpc/options/#config-file","text":"config-file=<path> Specify a config file to load options from. An example config file is shown below. # /path/to/file/aeond.conf daemon-address=192.168.0.1:9149 daemon-login=user:rpcpassword trusted-daemon=1 password=walletpassword Then launch wallet-cli with the following command: ./aeond --config-file=/path/to/file/aeond.conf","title":"config-file"},{"location":"documentation/wallet-rpc/options/#help","text":"help Produce a help message with this list available options.","title":"help"},{"location":"documentation/wallet-rpc/options/#log-file","text":"log-file=<path> The path to be used for the log file. Default argument: aeon-wallet-cli.log","title":"log-file"},{"location":"documentation/wallet-rpc/options/#max-log-file-size","text":"max-log-file-size=<bytes> Maximum log file size in bytes. Default argument: 104850000","title":"max-log-file-size"},{"location":"documentation/wallet-rpc/options/#max-log-files","text":"max-log-files=<number> Maximum number of rotated log files to be saved (no limit by setting to 0). Default argument: 50","title":"max-log-files"},{"location":"documentation/wallet-rpc/options/#log-level","text":"log-level=<level|category> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example --log-level=3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example --log-level=net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels.","title":"log-level"},{"location":"documentation/wallet-rpc/options/#daemon-address","text":"daemon-address=<ip_address>:<port> Use aeon daemon at ip-address:port. --daemon-address=192.168.0.1:9149","title":"daemon-address"},{"location":"documentation/wallet-rpc/options/#daemon-host","text":"daemon-host=<ip_address> Use daemon instance at specific IP address instead of localhost. --daemon-host=192.168.0.1","title":"daemon-host"},{"location":"documentation/wallet-rpc/options/#confirm-external-bind","text":"confirm-external-bind[=<1|0>] Confirm ip value is NOT a loopback (local) IP.","title":"confirm-external-bind"},{"location":"documentation/wallet-rpc/options/#daemon-login","text":"daemon-login=<username>[:<password>] username:password or username credentials for daemon RPC client.","title":"daemon-login"},{"location":"documentation/wallet-rpc/options/#daemon-port","text":"daemon-port=<port> Use daemon instance at specified port. Default argument: 11181","title":"daemon-port"},{"location":"documentation/wallet-rpc/options/#trusted-daemon","text":"trusted-daemon[=<1|0>] Enable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default.","title":"trusted-daemon"},{"location":"documentation/wallet-rpc/options/#untrusted-daemon","text":"untrusted-daemon[=<1|0>] Disable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default.","title":"untrusted-daemon"},{"location":"documentation/wallet-rpc/options/#password","text":"password=<password> Wallet password (escape/quote as needed).","title":"password"},{"location":"documentation/wallet-rpc/options/#password-file","text":"password-file=<path> Wallet password file.","title":"password-file"},{"location":"documentation/wallet-rpc/options/#prompt-for-password","text":"prompt-for-password[=<1|0> Prompts for password when not provided.","title":"prompt-for-password"},{"location":"documentation/wallet-rpc/options/#rpc-bind-ip","text":"rpc-bind-ip=<ip_address> Specify IP to bind RPC server.","title":"rpc-bind-ip"},{"location":"documentation/wallet-rpc/options/#rpc-login","text":"rpc-login=<username>[:<password>] Specify username[:password] required for RPC server.","title":"rpc-login"},{"location":"documentation/wallet-rpc/options/#disable-rpc-login","text":"disable-rpc-login[=<1|0> Disable HTTP authentication for RPC connections served by this process.","title":"disable-rpc-login"},{"location":"documentation/wallet-rpc/options/#rpc-access-control-origins","text":"rpc-access-control-origins=<list,of,comma,separated,urls> Specify a comma separated list of origins to allow cross origin resource sharing.","title":"rpc-access-control-origins"},{"location":"documentation/wallet-rpc/options/#rpc-bind-port","text":"rpc-bind-port=<port> Specify IP to bind RPC server.","title":"rpc-bind-port"},{"location":"documentation/wallet-rpc/options/#restricted-rpc","text":"restricted-rpc[=<1|0>] Restrict RPC to view only commands and do not return privacy sensitive data in RPC calls.","title":"restricted-rpc"},{"location":"documentation/wallet-rpc/options/#wallet-dir","text":"wallet-dir=<path> Directory for newly created wallets.","title":"wallet-dir"},{"location":"documentation/wallet-rpc/options/#wallet-file","text":"wallet-file=<path> Use wallet file at path .","title":"wallet-file"},{"location":"documentation/wallet-rpc/options/#generate-from-json","text":"generate-from-json=<path_to_json> Generate wallet from JSON format file.","title":"generate-from-json"},{"location":"documentation/wallet-rpc/options/#shared-ringdb-dir","text":"shared-ringdb-dir=<path> Set shared ring database path.","title":"shared-ringdb-dir"},{"location":"documentation/wallet-rpc/options/#detach","text":"detach[=<0|1>] Run as daemon.","title":"detach"},{"location":"documentation/wallet-rpc/options/#kdf-rounds","text":"kdf-rounds=<number-of-rounds> Number of rounds for the key derivation function.","title":"kdf-rounds"},{"location":"documentation/wallet-rpc/options/#max-concurrency","text":"max-concurrency=<number_of_cpu_threads> Set maximum number of CPU threads used by the daemon process for syncronizing blocks and processing transactions.","title":"max-concurrency"},{"location":"documentation/wallet-rpc/options/#non-interactive","text":"non-interactive[=<0|1>] Run non-interactive","title":"non-interactive"},{"location":"documentation/wallet-rpc/options/#tx-notify","text":"tx-notify=<path> Run a program for each new incoming transaction, '%s' will be replaced by the transaction hash.","title":"tx-notify"},{"location":"documentation/wallet-rpc/options/#pidfile","text":"pidfile=<path_to_file> File path to write the rpc's PID to (optional, requires --detach).","title":"pidfile"},{"location":"documentation/wallet-rpc/options/#stagenet","text":"stagenet[=<1|0>] Run on stagenet. The daemon must be launched with --stagenet flag.","title":"stagenet"},{"location":"documentation/wallet-rpc/options/#testnet","text":"testnet[=<1|0>] Run on testnet. The daemon must be launched with --testnet flag.","title":"testnet"},{"location":"documentation/wallet-rpc/options/#version","text":"version Output version information.","title":"version"},{"location":"network-info/charts/block_count_24h/","text":"","title":"Daily"},{"location":"network-info/charts/block_count_24h/#_1","text":"","title":""},{"location":"network-info/charts/block_difficulty/","text":"","title":"Block Difficulty"},{"location":"network-info/charts/block_difficulty/#_1","text":"","title":""},{"location":"network-info/charts/block_height/","text":"","title":"Total"},{"location":"network-info/charts/block_height/#_1","text":"","title":""},{"location":"network-info/charts/block_reward/","text":"","title":"Block Reward"},{"location":"network-info/charts/block_reward/#_1","text":"","title":""},{"location":"network-info/charts/block_size_cum/","text":"","title":"Total"},{"location":"network-info/charts/block_size_cum/#_1","text":"","title":""},{"location":"network-info/charts/block_size_median_24h/","text":"","title":"Median"},{"location":"network-info/charts/block_size_median_24h/#_1","text":"","title":""},{"location":"network-info/charts/block_time_median_24h/","text":"","title":"Block Time"},{"location":"network-info/charts/block_time_median_24h/#_1","text":"","title":""},{"location":"network-info/charts/fee_24h/","text":"","title":"AEON"},{"location":"network-info/charts/fee_24h/#_1","text":"","title":""},{"location":"network-info/charts/fee_24h_usd/","text":"","title":"USD"},{"location":"network-info/charts/fee_24h_usd/#_1","text":"","title":""},{"location":"network-info/charts/inflation_1Y/","text":"","title":"Inflation"},{"location":"network-info/charts/inflation_1Y/#_1","text":"","title":""},{"location":"network-info/charts/inputs/","text":"","title":"Inputs"},{"location":"network-info/charts/inputs/#_1","text":"","title":""},{"location":"network-info/charts/marketcap/","text":"","title":"USD"},{"location":"network-info/charts/marketcap/#_1","text":"","title":""},{"location":"network-info/charts/marketcap_btc/","text":"","title":"BTC"},{"location":"network-info/charts/marketcap_btc/#_1","text":"","title":""},{"location":"network-info/charts/marketcap_xmr/","text":"","title":"XMR"},{"location":"network-info/charts/marketcap_xmr/#_1","text":"","title":""},{"location":"network-info/charts/miner_revenue_1Y/","text":"","title":"Yearly"},{"location":"network-info/charts/miner_revenue_1Y/#_1","text":"","title":""},{"location":"network-info/charts/miner_revenue_24h/","text":"","title":"Daily"},{"location":"network-info/charts/miner_revenue_24h/#_1","text":"","title":""},{"location":"network-info/charts/nonce/","text":"","title":"Values"},{"location":"network-info/charts/nonce/#_1","text":"","title":""},{"location":"network-info/charts/nonce_dist/","text":"","title":"Randomness"},{"location":"network-info/charts/nonce_dist/#_1","text":"","title":""},{"location":"network-info/charts/outputs/","text":"","title":"Outputs"},{"location":"network-info/charts/outputs/#_1","text":"","title":""},{"location":"network-info/charts/outputs_inputs/","text":"","title":"Outputs-Inputs"},{"location":"network-info/charts/outputs_inputs/#_1","text":"","title":""},{"location":"network-info/charts/price/","text":"","title":"USD"},{"location":"network-info/charts/price/#_1","text":"","title":""},{"location":"network-info/charts/price_btc/","text":"","title":"BTC"},{"location":"network-info/charts/price_btc/#_1","text":"","title":""},{"location":"network-info/charts/price_xmr/","text":"","title":"XMR"},{"location":"network-info/charts/price_xmr/#_1","text":"","title":""},{"location":"network-info/charts/supply_locked/","text":"","title":"Locked"},{"location":"network-info/charts/supply_locked/#_1","text":"","title":""},{"location":"network-info/charts/supply_total/","text":"","title":"Circulating"},{"location":"network-info/charts/supply_total/#_1","text":"","title":""},{"location":"network-info/charts/tx_24h/","text":"","title":"Transactions"},{"location":"network-info/charts/tx_24h/#_1","text":"","title":""},{"location":"network-info/charts/version/","text":"","title":"Version"},{"location":"network-info/charts/version/#_1","text":"","title":""},{"location":"network-info/charts/volume/","text":"","title":"AEON"},{"location":"network-info/charts/volume/#_1","text":"","title":""},{"location":"network-info/charts/volume_btc/","text":"","title":"BTC"},{"location":"network-info/charts/volume_btc/#_1","text":"","title":""},{"location":"network-info/charts/volume_usd/","text":"","title":"USD"},{"location":"network-info/charts/volume_usd/#_1","text":"","title":""},{"location":"the-project/bug-report/","text":"Vulnerability response Vulnerability response should be redirected to Monero because much of Aeon's technical ground is shared Our Vulnerability Response Process encourages responsible disclosure We are also available via HackerOne","title":"Bug report"},{"location":"the-project/bug-report/#vulnerability-response","text":"Vulnerability response should be redirected to Monero because much of Aeon's technical ground is shared Our Vulnerability Response Process encourages responsible disclosure We are also available via HackerOne","title":"Vulnerability response"},{"location":"the-project/bug-report/#_1","text":"","title":""},{"location":"the-project/code-of-conduct/","text":"Code of Conduct (22/C4.1) License Copyright (c) 2009-2015 Pieter Hintjens. Copyright (c) 2017-2018 The Monero Project. This Specification is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This Specification is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, see http://www.gnu.org/licenses . Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119. The \"Monero Maintainer Team\" is defined in this document as the following users: - fluffypony - moneromooo - hyc Goals C4 is meant to provide a reusable optimal collaboration model for open source software projects. It has these specific goals: To maximize the scale and diversity of the community around a project, by reducing the friction for new Contributors and creating a scaled participation model with strong positive feedbacks; To relieve dependencies on key individuals by separating different skill sets so that there is a larger pool of competence in any required domain; To allow the project to develop faster and more accurately, by increasing the diversity of the decision making process; To support the natural life cycle of project versions from experimental through to stable, by allowing safe experimentation, rapid failure, and isolation of stable code; To reduce the internal complexity of project repositories, thus making it easier for Contributors to participate and reducing the scope for error; To enforce collective ownership of the project, which increases economic incentive to Contributors and reduces the risk of hijack by hostile entities. Design Preliminaries The project SHALL use the git distributed revision control system. The project SHALL be hosted on github.com or equivalent, herein called the \"Platform\". The project SHALL use the Platform issue tracker. Non-GitHub example: \"Platform\" could be a vanilla git repo and Trac hosted on the same machine/network. The Platform issue tracker would be Trac. The project SHOULD have clearly documented guidelines for code style. A \"Contributor\" is a person who wishes to provide a patch, being a set of commits that solve some clearly identified problem. A \"Maintainer\" is a person who merges patches to the project. Maintainers are not developers; their job is to enforce process. Contributors SHALL NOT have commit access to the repository unless they are also Maintainers. Maintainers SHALL have commit access to the repository. Everyone, without distinction or discrimination, SHALL have an equal right to become a Contributor under the terms of this contract. Licensing and ownership The project SHALL use a share-alike license, such as BSD-3, the GPLv3 or a variant thereof (LGPL, AGPL), or the MPLv2. All contributions to the project source code (\"patches\") SHALL use the same license as the project. All patches are owned by their authors. There SHALL NOT be any copyright assignment process. The copyrights in the project SHALL be owned collectively by all its Contributors. Each Contributor SHALL be responsible for identifying themselves in the project Contributor list. Patch requirements Maintainers MUST have a Platform account and SHOULD use their real names or a well-known alias. Contributors SHOULD have a Platform account and MAY use their real names or a well-known alias. A patch SHOULD be a minimal and accurate answer to exactly one identified and agreed problem. A patch MUST adhere to the code style guidelines of the project if these are defined. A patch MUST adhere to the \"Evolution of Public Contracts\" guidelines defined below. A patch SHALL NOT include non-trivial code from other projects unless the Contributor is the original author of that code. A patch MUST compile cleanly and pass project self-tests on at least the principle target platform. A patch commit message SHOULD consist of a single short (less than 50 character) line summarizing the change, optionally followed by a blank line and then a more thorough description. A \"Correct Patch\" is one that satisfies the above requirements. Development process Change on the project SHALL be governed by the pattern of accurately identifying problems and applying minimal, accurate solutions to these problems. To request changes, a user SHOULD log an issue on the project Platform issue tracker. The user or Contributor SHOULD write the issue by describing the problem they face or observe. The user or Contributor SHOULD seek consensus on the accuracy of their observation, and the value of solving the problem. Users SHALL NOT log feature requests, ideas, or suggestions unrelated to Monero code or Monero's dependency code or Monero's potential/future dependency code or research which successfully implements Monero. Users SHALL NOT log any solutions to problems (verifiable or hypothetical) of which are not explicitly documented and/or not provable and/or cannot be reasonably proven. Thus, the release history of the project SHALL be a list of meaningful issues logged and solved. To work on an issue, a Contributor SHALL fork the project repository and then work on their forked repository. To submit a patch, a Contributor SHALL create a Platform pull request back to the project. A Contributor SHALL NOT commit changes directly to the project. To discuss a patch, people MAY comment on the Platform pull request, on the commit, or elsewhere. To accept or reject a patch, a Maintainer SHALL use the Platform interface. Maintainers SHOULD NOT merge their own patches except in exceptional cases, such as non-responsiveness from other Maintainers for an extended period (more than 30 days) or unless urgent as defined by the Monero Maintainers Team. Maintainers SHALL NOT make value judgments on correct patches unless the Maintainer (as may happen in rare circumstances) is a core code developer. Maintainers MUST NOT merge pull requests in less than 168 hours (1 week) unless deemed urgent by at least 2 people from the Monero Maintainer Team. The Contributor MAY tag an issue as \"Ready\" after making a pull request for the issue. The user who created an issue SHOULD close the issue after checking the patch is successful. Maintainers SHOULD ask for improvements to incorrect patches and SHOULD reject incorrect patches if the Contributor does not respond constructively. Any Contributor who has value judgments on a correct patch SHOULD express these via their own patches. Maintainers MAY commit changes to non-source documentation directly to the project. Creating stable releases The project SHALL have one branch (\"master\") that always holds the latest in-progress version and SHOULD always build. The project SHALL NOT use topic branches for any reason. Personal forks MAY use topic branches. To make a stable release someone SHALL fork the repository by copying it and thus become maintainer of this repository. Forking a project for stabilization MAY be done unilaterally and without agreement of project maintainers. A patch to a stabilization project declared \"stable\" SHALL be accompanied by a reproducible test case. Evolution of public contracts All Public Contracts (APIs or protocols) SHALL be documented. All Public Contracts SHOULD have space for extensibility and experimentation. A patch that modifies a stable Public Contract SHOULD not break existing applications unless there is overriding consensus on the value of doing this. A patch that introduces new features to a Public Contract SHOULD do so using new names. Old names SHOULD be deprecated in a systematic fashion by marking new names as \"experimental\" until they are stable, then marking the old names as \"deprecated\". When sufficient time has passed, old deprecated names SHOULD be marked \"legacy\" and eventually removed. Old names SHALL NOT be reused by new features. When old names are removed, their implementations MUST provoke an exception (assertion) if used by applications. Project administration The project founders SHALL act as Administrators to manage the set of project Maintainers. The Administrators SHALL ensure their own succession over time by promoting the most effective Maintainers. A new Contributor who makes a correct patch SHALL be invited to become a Maintainer. Administrators MAY remove Maintainers who are inactive for an extended period of time, or who repeatedly fail to apply this process accurately. Administrators SHOULD block or ban \"bad actors\" who cause stress and pain to others in the project. This should be done after public discussion, with a chance for all parties to speak. A bad actor is someone who repeatedly ignores the rules and culture of the project, who is needlessly argumentative or hostile, or who is offensive, and who is unable to self-correct their behavior when asked to do so by others.","title":"Code of conduct"},{"location":"the-project/code-of-conduct/#code-of-conduct-22c41","text":"","title":"Code of Conduct (22/C4.1)"},{"location":"the-project/code-of-conduct/#license","text":"Copyright (c) 2009-2015 Pieter Hintjens. Copyright (c) 2017-2018 The Monero Project. This Specification is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This Specification is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, see http://www.gnu.org/licenses .","title":"License"},{"location":"the-project/code-of-conduct/#language","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119. The \"Monero Maintainer Team\" is defined in this document as the following users: - fluffypony - moneromooo - hyc","title":"Language"},{"location":"the-project/code-of-conduct/#goals","text":"C4 is meant to provide a reusable optimal collaboration model for open source software projects. It has these specific goals: To maximize the scale and diversity of the community around a project, by reducing the friction for new Contributors and creating a scaled participation model with strong positive feedbacks; To relieve dependencies on key individuals by separating different skill sets so that there is a larger pool of competence in any required domain; To allow the project to develop faster and more accurately, by increasing the diversity of the decision making process; To support the natural life cycle of project versions from experimental through to stable, by allowing safe experimentation, rapid failure, and isolation of stable code; To reduce the internal complexity of project repositories, thus making it easier for Contributors to participate and reducing the scope for error; To enforce collective ownership of the project, which increases economic incentive to Contributors and reduces the risk of hijack by hostile entities.","title":"Goals"},{"location":"the-project/code-of-conduct/#design","text":"","title":"Design"},{"location":"the-project/code-of-conduct/#preliminaries","text":"The project SHALL use the git distributed revision control system. The project SHALL be hosted on github.com or equivalent, herein called the \"Platform\". The project SHALL use the Platform issue tracker. Non-GitHub example: \"Platform\" could be a vanilla git repo and Trac hosted on the same machine/network. The Platform issue tracker would be Trac. The project SHOULD have clearly documented guidelines for code style. A \"Contributor\" is a person who wishes to provide a patch, being a set of commits that solve some clearly identified problem. A \"Maintainer\" is a person who merges patches to the project. Maintainers are not developers; their job is to enforce process. Contributors SHALL NOT have commit access to the repository unless they are also Maintainers. Maintainers SHALL have commit access to the repository. Everyone, without distinction or discrimination, SHALL have an equal right to become a Contributor under the terms of this contract.","title":"Preliminaries"},{"location":"the-project/code-of-conduct/#licensing-and-ownership","text":"The project SHALL use a share-alike license, such as BSD-3, the GPLv3 or a variant thereof (LGPL, AGPL), or the MPLv2. All contributions to the project source code (\"patches\") SHALL use the same license as the project. All patches are owned by their authors. There SHALL NOT be any copyright assignment process. The copyrights in the project SHALL be owned collectively by all its Contributors. Each Contributor SHALL be responsible for identifying themselves in the project Contributor list.","title":"Licensing and ownership"},{"location":"the-project/code-of-conduct/#patch-requirements","text":"Maintainers MUST have a Platform account and SHOULD use their real names or a well-known alias. Contributors SHOULD have a Platform account and MAY use their real names or a well-known alias. A patch SHOULD be a minimal and accurate answer to exactly one identified and agreed problem. A patch MUST adhere to the code style guidelines of the project if these are defined. A patch MUST adhere to the \"Evolution of Public Contracts\" guidelines defined below. A patch SHALL NOT include non-trivial code from other projects unless the Contributor is the original author of that code. A patch MUST compile cleanly and pass project self-tests on at least the principle target platform. A patch commit message SHOULD consist of a single short (less than 50 character) line summarizing the change, optionally followed by a blank line and then a more thorough description. A \"Correct Patch\" is one that satisfies the above requirements.","title":"Patch requirements"},{"location":"the-project/code-of-conduct/#development-process","text":"Change on the project SHALL be governed by the pattern of accurately identifying problems and applying minimal, accurate solutions to these problems. To request changes, a user SHOULD log an issue on the project Platform issue tracker. The user or Contributor SHOULD write the issue by describing the problem they face or observe. The user or Contributor SHOULD seek consensus on the accuracy of their observation, and the value of solving the problem. Users SHALL NOT log feature requests, ideas, or suggestions unrelated to Monero code or Monero's dependency code or Monero's potential/future dependency code or research which successfully implements Monero. Users SHALL NOT log any solutions to problems (verifiable or hypothetical) of which are not explicitly documented and/or not provable and/or cannot be reasonably proven. Thus, the release history of the project SHALL be a list of meaningful issues logged and solved. To work on an issue, a Contributor SHALL fork the project repository and then work on their forked repository. To submit a patch, a Contributor SHALL create a Platform pull request back to the project. A Contributor SHALL NOT commit changes directly to the project. To discuss a patch, people MAY comment on the Platform pull request, on the commit, or elsewhere. To accept or reject a patch, a Maintainer SHALL use the Platform interface. Maintainers SHOULD NOT merge their own patches except in exceptional cases, such as non-responsiveness from other Maintainers for an extended period (more than 30 days) or unless urgent as defined by the Monero Maintainers Team. Maintainers SHALL NOT make value judgments on correct patches unless the Maintainer (as may happen in rare circumstances) is a core code developer. Maintainers MUST NOT merge pull requests in less than 168 hours (1 week) unless deemed urgent by at least 2 people from the Monero Maintainer Team. The Contributor MAY tag an issue as \"Ready\" after making a pull request for the issue. The user who created an issue SHOULD close the issue after checking the patch is successful. Maintainers SHOULD ask for improvements to incorrect patches and SHOULD reject incorrect patches if the Contributor does not respond constructively. Any Contributor who has value judgments on a correct patch SHOULD express these via their own patches. Maintainers MAY commit changes to non-source documentation directly to the project.","title":"Development process"},{"location":"the-project/code-of-conduct/#creating-stable-releases","text":"The project SHALL have one branch (\"master\") that always holds the latest in-progress version and SHOULD always build. The project SHALL NOT use topic branches for any reason. Personal forks MAY use topic branches. To make a stable release someone SHALL fork the repository by copying it and thus become maintainer of this repository. Forking a project for stabilization MAY be done unilaterally and without agreement of project maintainers. A patch to a stabilization project declared \"stable\" SHALL be accompanied by a reproducible test case.","title":"Creating stable releases"},{"location":"the-project/code-of-conduct/#evolution-of-public-contracts","text":"All Public Contracts (APIs or protocols) SHALL be documented. All Public Contracts SHOULD have space for extensibility and experimentation. A patch that modifies a stable Public Contract SHOULD not break existing applications unless there is overriding consensus on the value of doing this. A patch that introduces new features to a Public Contract SHOULD do so using new names. Old names SHOULD be deprecated in a systematic fashion by marking new names as \"experimental\" until they are stable, then marking the old names as \"deprecated\". When sufficient time has passed, old deprecated names SHOULD be marked \"legacy\" and eventually removed. Old names SHALL NOT be reused by new features. When old names are removed, their implementations MUST provoke an exception (assertion) if used by applications.","title":"Evolution of public contracts"},{"location":"the-project/code-of-conduct/#project-administration","text":"The project founders SHALL act as Administrators to manage the set of project Maintainers. The Administrators SHALL ensure their own succession over time by promoting the most effective Maintainers. A new Contributor who makes a correct patch SHALL be invited to become a Maintainer. Administrators MAY remove Maintainers who are inactive for an extended period of time, or who repeatedly fail to apply this process accurately. Administrators SHOULD block or ban \"bad actors\" who cause stress and pain to others in the project. This should be done after public discussion, with a chance for all parties to speak. A bad actor is someone who repeatedly ignores the rules and culture of the project, who is needlessly argumentative or hostile, or who is offensive, and who is unable to self-correct their behavior when asked to do so by others.","title":"Project administration"},{"location":"the-project/contributing-guidelines/","text":"Contributing to Aeon Being a fork of Monero, Aeon shares most of its codebase with Monero while making a few critical modifications such that it can offer a unique alternative to Monero. The codebase is intentionally kept close to Monero's in order to benefit from the higher code reliability due to the larger source of peer reviewing available in Monero. Merging upstream patches The above goal is achieved through the continuous effort of merging upstream improvements. Anyone with sufficient knowledge are encouraged to contribute in this effort. In order to ensure the consistency of the changes (which greatly helps new developers easily navigate through the commit log and cross-reference between the two repositories) as well as to properly credit the original author, please use the git cherry-pick command. It is also highly recommended to postfix the first line of the commit message with the corresponding pull request number so that one can easily reference the original Monero PR. For example, if you are to merge the upstream PR 4356 which has two commits with the following commit messages: Docker android: use common prefix Docker android: add libsodium then, make the corresponding commit messages as follows: Docker android: use common prefix /monero#4356 Docker android: add libsodium /monero#4356 Note that the postfix is added to the first line of each commit message. Also, please make some reasonable effort to keep the ordering of merging patches consistent with the original so that potential issues like merge conflicts etc. are prevented, although this is not a strict requirement. Proposing changes The above effort is faciliated by avoiding the creation of unnecessary differences in the repository. This implies that any proposed changes which also apply to Monero should be submitted to Monero. Specifically, please send a pull request to Monero first, then send a corresponding PR to Aeon by cherry-picking, as described above. If your Monero PR is merged, your corresponding Aeon PR will then be merged subsequently. If you are to propose some changes that are specific to Aeon and distinct from Monero, submit a pull request directly to Aeon and justify your changes by laying out how they are more or uniquely applicable to Aeon. With a good justification the burden of increased maintenance cost as described above can be overcome. Contributing to Monero A good way to help is to test, and report bugs. See How to Report Bugs Effectively (by Simon Tatham) if you want to help that way. Testing is invaluable in making a piece of software solid and usable. General guidelines Comments are encouraged. If modifying code for which Doxygen headers exist, that header must be modified to match. Tests would be nice to have if you're adding functionality. Patches are preferably to be sent via a Github pull request. If that can't be done, patches in \"git format-patch\" format can be sent (eg, posted to fpaste.org with a long enough timeout and a link posted to #monero-dev on irc.freenode.net). Patches should be self contained. A good rule of thumb is to have one patch per separate issue, feature, or logical change. Also, no other changes, such as random whitespace changes or reindentation. Following the code style of the particular chunk of code you're modifying is encouraged. Proper squashing should be done (eg, if you're making a buggy patch, then a later patch to fix the bug, both patches should be merged). If you've made random unrelated changes (either because your editor is annoying or you made them for other reasons), you can select what changes go into the coming commit using git add -p, which walks you through all the changes and asks whether or not to include this particular change. This helps create clean patches without any irrelevant changes. git diff will show you the changes in your tree. git diff --cached will show what is currently staged for commit. As you add hunks with git add -p, those hunks will \"move\" from the git diff output to the git diff --cached output, so you can see clearly what your commit is going to look like. Commits and pull requests Commit messages should be sensible. That means a subject line that describes the patch, with an optional longer body that gives details, documentation, etc. When submitting a pull request on Github, make sure your branch is rebased. No merge commits nor stray commits from other people in your submitted branch, please. You may be asked to rebase if there are conflicts (even trivially resolvable ones). PGP signing commits is strongly encouraged. That should explain why the previous paragraph is here.","title":"Contributing"},{"location":"the-project/contributing-guidelines/#contributing-to-aeon","text":"Being a fork of Monero, Aeon shares most of its codebase with Monero while making a few critical modifications such that it can offer a unique alternative to Monero. The codebase is intentionally kept close to Monero's in order to benefit from the higher code reliability due to the larger source of peer reviewing available in Monero.","title":"Contributing to Aeon"},{"location":"the-project/contributing-guidelines/#merging-upstream-patches","text":"The above goal is achieved through the continuous effort of merging upstream improvements. Anyone with sufficient knowledge are encouraged to contribute in this effort. In order to ensure the consistency of the changes (which greatly helps new developers easily navigate through the commit log and cross-reference between the two repositories) as well as to properly credit the original author, please use the git cherry-pick command. It is also highly recommended to postfix the first line of the commit message with the corresponding pull request number so that one can easily reference the original Monero PR. For example, if you are to merge the upstream PR 4356 which has two commits with the following commit messages: Docker android: use common prefix Docker android: add libsodium then, make the corresponding commit messages as follows: Docker android: use common prefix /monero#4356 Docker android: add libsodium /monero#4356 Note that the postfix is added to the first line of each commit message. Also, please make some reasonable effort to keep the ordering of merging patches consistent with the original so that potential issues like merge conflicts etc. are prevented, although this is not a strict requirement.","title":"Merging upstream patches"},{"location":"the-project/contributing-guidelines/#proposing-changes","text":"The above effort is faciliated by avoiding the creation of unnecessary differences in the repository. This implies that any proposed changes which also apply to Monero should be submitted to Monero. Specifically, please send a pull request to Monero first, then send a corresponding PR to Aeon by cherry-picking, as described above. If your Monero PR is merged, your corresponding Aeon PR will then be merged subsequently. If you are to propose some changes that are specific to Aeon and distinct from Monero, submit a pull request directly to Aeon and justify your changes by laying out how they are more or uniquely applicable to Aeon. With a good justification the burden of increased maintenance cost as described above can be overcome.","title":"Proposing changes"},{"location":"the-project/contributing-guidelines/#contributing-to-monero","text":"A good way to help is to test, and report bugs. See How to Report Bugs Effectively (by Simon Tatham) if you want to help that way. Testing is invaluable in making a piece of software solid and usable.","title":"Contributing to Monero"},{"location":"the-project/contributing-guidelines/#general-guidelines","text":"Comments are encouraged. If modifying code for which Doxygen headers exist, that header must be modified to match. Tests would be nice to have if you're adding functionality. Patches are preferably to be sent via a Github pull request. If that can't be done, patches in \"git format-patch\" format can be sent (eg, posted to fpaste.org with a long enough timeout and a link posted to #monero-dev on irc.freenode.net). Patches should be self contained. A good rule of thumb is to have one patch per separate issue, feature, or logical change. Also, no other changes, such as random whitespace changes or reindentation. Following the code style of the particular chunk of code you're modifying is encouraged. Proper squashing should be done (eg, if you're making a buggy patch, then a later patch to fix the bug, both patches should be merged). If you've made random unrelated changes (either because your editor is annoying or you made them for other reasons), you can select what changes go into the coming commit using git add -p, which walks you through all the changes and asks whether or not to include this particular change. This helps create clean patches without any irrelevant changes. git diff will show you the changes in your tree. git diff --cached will show what is currently staged for commit. As you add hunks with git add -p, those hunks will \"move\" from the git diff output to the git diff --cached output, so you can see clearly what your commit is going to look like.","title":"General guidelines"},{"location":"the-project/contributing-guidelines/#commits-and-pull-requests","text":"Commit messages should be sensible. That means a subject line that describes the patch, with an optional longer body that gives details, documentation, etc. When submitting a pull request on Github, make sure your branch is rebased. No merge commits nor stray commits from other people in your submitted branch, please. You may be asked to rebase if there are conflicts (even trivially resolvable ones). PGP signing commits is strongly encouraged. That should explain why the previous paragraph is here.","title":"Commits and pull requests"},{"location":"the-project/dependencies/","text":"Dependencies The following table summarizes the tools and libraries required to build. A few of the libraries are also included in this repository (marked as \"Vendored\"). By default, the build uses the library installed on the system, and ignores the vendored sources. However, if no library is found installed on the system, then the vendored source will be built and used. The vendored sources are also used for statically-linked builds because distribution packages often include only shared library binaries ( .so ) but not static library archives ( .a ). Dep Min. version Vendored Debian/Ubuntu pkg Arch pkg Fedora Optional Purpose GCC 4.7.3 NO build-essential base-devel gcc NO CMake 3.5 NO cmake cmake cmake NO pkg-config any NO pkg-config base-devel pkgconf NO Boost 1.58 NO libboost-all-dev boost boost-devel NO C++ libraries OpenSSL basically any NO libssl-dev openssl openssl-devel NO sha256 sum libzmq 3.0.0 NO libzmq3-dev zeromq cppzmq-devel NO ZeroMQ library OpenPGM ? NO libpgm-dev libpgm openpgm-devel NO For ZeroMQ libnorm[2] ? NO libnorm-dev ` YES For ZeroMQ libunbound 1.4.16 YES libunbound-dev unbound unbound-devel NO DNS resolver libsodium ? NO libsodium-dev libsodium libsodium-devel NO cryptography libunwind any NO libunwind-dev libunwind libunwind-devel YES Stack traces liblzma any NO liblzma-dev xz xz-devel YES For libunwind libreadline 6.3.0 NO libreadline-dev readline readline-devel YES Input editing ldns 1.6.17 NO libldns-dev ldns ldns-devel YES SSL toolkit expat 1.1 NO libexpat1-dev expat expat-devel YES XML parsing GTest 1.5 YES libgtest-dev [1] gtest gtest-devel YES Test suite Doxygen any NO doxygen doxygen doxygen YES Documentation Graphviz any NO graphviz graphviz graphviz YES Documentation [1] On Debian/Ubuntu libgtest-dev only includes sources and headers. You must build the library binary manually. This can be done with the following command sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake . && sudo make && sudo mv libg* /usr/lib/ [2] libnorm-dev is needed if your zmq library was built with libnorm, and not needed otherwise [3] Note the differences of Libunwind and Libreadline for 16.04 and 18.04 distros Install all dependencies at once on Debian/Ubuntu 16.04: sudo apt update && sudo apt install build-essential cmake git pkg-config libboost-all-dev libssl-dev libzmq3-dev libunbound-dev libsodium-dev libunwind8-dev liblzma-dev libreadline6-dev libldns-dev libexpat1-dev doxygen graphviz libpgm-dev Install all dependencies at once on Debian/Ubuntu 18.04: sudo apt update && sudo apt install build-essential cmake git pkg-config libboost-all-dev libssl-dev libzmq3-dev libunbound-dev libsodium-dev libunwind-dev liblzma-dev libreadline-dev libldns-dev libexpat1-dev doxygen graphviz libpgm-dev libnorm-dev","title":"Dependencies"},{"location":"the-project/dependencies/#dependencies","text":"","title":"Dependencies"},{"location":"the-project/dependencies/#_1","text":"The following table summarizes the tools and libraries required to build. A few of the libraries are also included in this repository (marked as \"Vendored\"). By default, the build uses the library installed on the system, and ignores the vendored sources. However, if no library is found installed on the system, then the vendored source will be built and used. The vendored sources are also used for statically-linked builds because distribution packages often include only shared library binaries ( .so ) but not static library archives ( .a ). Dep Min. version Vendored Debian/Ubuntu pkg Arch pkg Fedora Optional Purpose GCC 4.7.3 NO build-essential base-devel gcc NO CMake 3.5 NO cmake cmake cmake NO pkg-config any NO pkg-config base-devel pkgconf NO Boost 1.58 NO libboost-all-dev boost boost-devel NO C++ libraries OpenSSL basically any NO libssl-dev openssl openssl-devel NO sha256 sum libzmq 3.0.0 NO libzmq3-dev zeromq cppzmq-devel NO ZeroMQ library OpenPGM ? NO libpgm-dev libpgm openpgm-devel NO For ZeroMQ libnorm[2] ? NO libnorm-dev ` YES For ZeroMQ libunbound 1.4.16 YES libunbound-dev unbound unbound-devel NO DNS resolver libsodium ? NO libsodium-dev libsodium libsodium-devel NO cryptography libunwind any NO libunwind-dev libunwind libunwind-devel YES Stack traces liblzma any NO liblzma-dev xz xz-devel YES For libunwind libreadline 6.3.0 NO libreadline-dev readline readline-devel YES Input editing ldns 1.6.17 NO libldns-dev ldns ldns-devel YES SSL toolkit expat 1.1 NO libexpat1-dev expat expat-devel YES XML parsing GTest 1.5 YES libgtest-dev [1] gtest gtest-devel YES Test suite Doxygen any NO doxygen doxygen doxygen YES Documentation Graphviz any NO graphviz graphviz graphviz YES Documentation [1] On Debian/Ubuntu libgtest-dev only includes sources and headers. You must build the library binary manually. This can be done with the following command sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake . && sudo make && sudo mv libg* /usr/lib/ [2] libnorm-dev is needed if your zmq library was built with libnorm, and not needed otherwise [3] Note the differences of Libunwind and Libreadline for 16.04 and 18.04 distros Install all dependencies at once on Debian/Ubuntu 16.04: sudo apt update && sudo apt install build-essential cmake git pkg-config libboost-all-dev libssl-dev libzmq3-dev libunbound-dev libsodium-dev libunwind8-dev liblzma-dev libreadline6-dev libldns-dev libexpat1-dev doxygen graphviz libpgm-dev Install all dependencies at once on Debian/Ubuntu 18.04: sudo apt update && sudo apt install build-essential cmake git pkg-config libboost-all-dev libssl-dev libzmq3-dev libunbound-dev libsodium-dev libunwind-dev liblzma-dev libreadline-dev libldns-dev libexpat1-dev doxygen graphviz libpgm-dev libnorm-dev","title":""},{"location":"the-project/donate/","text":"Supporting the project Aeon is a 100% community-sponsored endeavor. If you want to join our efforts, the easiest thing you can do is support the project financially. Both Aeon and Bitcoin donations can be made to donate.aeon.cash if using a client that supports the OpenAlias standard. Alternatively you can send AEON to the Aeon donation address via the donate command (type help in the command-line wallet for details). The Aeon donation address is: WmsSWgtT1JPg5e3cK41hKXSHVpKW7e47bjgiKmWZkYrhSS5LhRemNyqayaSBtAQ6517eo5PtH9wxHVmM78JDZSUu2W8PqRiNs (viewkey: 71bf19a7348ede17fa487167710dac401ef1556851bfd36b76040facf051630b ) The Bitcoin donation address is: 12Cyjf3qV6qLyXdzpLSLPdRFPUVidvnzFM","title":"Donate"},{"location":"the-project/donate/#supporting-the-project","text":"Aeon is a 100% community-sponsored endeavor. If you want to join our efforts, the easiest thing you can do is support the project financially. Both Aeon and Bitcoin donations can be made to donate.aeon.cash if using a client that supports the OpenAlias standard. Alternatively you can send AEON to the Aeon donation address via the donate command (type help in the command-line wallet for details). The Aeon donation address is: WmsSWgtT1JPg5e3cK41hKXSHVpKW7e47bjgiKmWZkYrhSS5LhRemNyqayaSBtAQ6517eo5PtH9wxHVmM78JDZSUu2W8PqRiNs (viewkey: 71bf19a7348ede17fa487167710dac401ef1556851bfd36b76040facf051630b ) The Bitcoin donation address is: 12Cyjf3qV6qLyXdzpLSLPdRFPUVidvnzFM","title":"Supporting the project"},{"location":"the-project/donate/#_1","text":"","title":""},{"location":"the-project/features/","text":"Features PoW algorithm: KangarooTwelve Max supply: ~18.4 million Block reward: smoothly decreasing Block time: 240 seconds Difficulty: retargets at every block ASIC-friendly proof-of-work We believe ASIC resistance is ultimately futile while imposing various forms of undesirable cost. Our ASIC-friendly PoW (KangarooTwelve) allows for faster verification of the blockchain. This also helps stabilize the protocol as the need for PoW-change hard forks is eliminated. No use of RingCT Monero's RingCT for encrypting transaction amounts comes with a theoretical risk of catastrophic collapse of the monetary system due to hidden inflation if the discrete log of the second generator is discovered. Favoring supply soundness over privacy, we choose not to use RingCT until cryptographers invent an efficient commitment scheme with unconditional soundness. We believe practical level of privacy can still be achieved without RingCT. Not using RingCT also contributes to faster syncing. Smaller Blockchain AEON's block time is 4 minutes. This halves the number of blocks produced each day compared to Monero, further reducing the cost of running a node. Smaller ring size AEON's ring size is fixed to 3 which is the bare minimum needed to prevent chain reactions ( link ). Monero's higher ring size means more degree of obfuscation for each transaction, but it also comes at the cost of increased blockchain size and longer verification time. We choose to stick with ring size 3 until a convincing evidence against it is found.","title":"Features"},{"location":"the-project/features/#features","text":"PoW algorithm: KangarooTwelve Max supply: ~18.4 million Block reward: smoothly decreasing Block time: 240 seconds Difficulty: retargets at every block","title":"Features"},{"location":"the-project/features/#_1","text":"","title":""},{"location":"the-project/history/","text":"Welcome to the aeon.wiki This page is under construction.","title":"History"},{"location":"the-project/history/#welcome-to-the-aeonwiki","text":"This page is under construction.","title":"Welcome to the aeon.wiki"},{"location":"the-project/history/#_1","text":"","title":""},{"location":"the-project/install/","text":"Welcome to the aeon.wiki This page is under construction.","title":"Install"},{"location":"the-project/install/#welcome-to-the-aeonwiki","text":"This page is under construction.","title":"Welcome to the aeon.wiki"},{"location":"the-project/install/#_1","text":"","title":""},{"location":"the-project/known-bugs/","text":"Welcome to the aeon.wiki This page is under construction.","title":"Known bugs"},{"location":"the-project/known-bugs/#welcome-to-the-aeonwiki","text":"This page is under construction.","title":"Welcome to the aeon.wiki"},{"location":"the-project/known-bugs/#_1","text":"","title":""},{"location":"the-project/releases/","text":"Software upgrades Aeon uses a software upgrade (hard fork) mechanism to implement new features. This means that users of Aeon (end users and service providers) should run current versions and upgrade their software as needed. The required software for these upgrades will be available prior to the scheduled date. Please check the repository prior to this date for the proper Aeon software version. Below is the historical schedule and the projected schedule for the next upgrade. Dates are provided in the format YYYY-MM-DD. Software upgrade block height Date Fork version Minimum Aeon version Recommended Aeon version Details 592000 2015-08-04 v1 (exceptional, version not bumped) v0.9.0.0 v0.9.14.0 blocktime = 240 seconds, CryptoNight-Lite, lower mining priority for ringsize < 3 963500 2018-06-03 v7 v0.12.0.0 v0.12.9.0-aeon Rebase to Monero's latest codebase with RingCT disabled, CryptoNight-Lite variant 1, limited use of ringsize 1, ban ringsize 2 1146200 2019-10-25 v8 v0.13.0.0-aeon v0.13.1.0-aeon Switch to K12 PoW, reduced tx size with Borromean sigs, fixed ringsize 3, long-term block size, enforced 10 block age 1280000 2020-11-11 v9 v0.14.1.0-aeon v0.14.1.0-aeon Difficulty algorithm variant 9 (cut/sort removed, lag reduced to 8), change to the block median used to calculate penalty, deterministic unlock times","title":"Releases"},{"location":"the-project/releases/#software-upgrades","text":"Aeon uses a software upgrade (hard fork) mechanism to implement new features. This means that users of Aeon (end users and service providers) should run current versions and upgrade their software as needed. The required software for these upgrades will be available prior to the scheduled date. Please check the repository prior to this date for the proper Aeon software version. Below is the historical schedule and the projected schedule for the next upgrade. Dates are provided in the format YYYY-MM-DD. Software upgrade block height Date Fork version Minimum Aeon version Recommended Aeon version Details 592000 2015-08-04 v1 (exceptional, version not bumped) v0.9.0.0 v0.9.14.0 blocktime = 240 seconds, CryptoNight-Lite, lower mining priority for ringsize < 3 963500 2018-06-03 v7 v0.12.0.0 v0.12.9.0-aeon Rebase to Monero's latest codebase with RingCT disabled, CryptoNight-Lite variant 1, limited use of ringsize 1, ban ringsize 2 1146200 2019-10-25 v8 v0.13.0.0-aeon v0.13.1.0-aeon Switch to K12 PoW, reduced tx size with Borromean sigs, fixed ringsize 3, long-term block size, enforced 10 block age 1280000 2020-11-11 v9 v0.14.1.0-aeon v0.14.1.0-aeon Difficulty algorithm variant 9 (cut/sort removed, lag reduced to 8), change to the block median used to calculate penalty, deterministic unlock times","title":"Software upgrades"},{"location":"the-project/releases/#_1","text":"","title":""},{"location":"the-project/todo/","text":"Welcome to the aeon.wiki tutorials history install known bugs Thanks The name","title":"TODO"},{"location":"the-project/todo/#welcome-to-the-aeonwiki","text":"tutorials history install known bugs Thanks The name","title":"Welcome to the aeon.wiki"},{"location":"tutorial/basic-examples/","text":"Welcome to the aeon.wiki This page is under construction.","title":"Basic examples"},{"location":"tutorial/basic-examples/#welcome-to-the-aeonwiki","text":"This page is under construction.","title":"Welcome to the aeon.wiki"},{"location":"tutorial/basic-examples/#_1","text":"","title":""},{"location":"tutorial/faq/","text":"Welcome to the aeon.wiki This page is under construction.","title":"FAQ"},{"location":"tutorial/faq/#welcome-to-the-aeonwiki","text":"This page is under construction.","title":"Welcome to the aeon.wiki"},{"location":"tutorial/faq/#_1","text":"","title":""},{"location":"tutorial/getting-started/","text":"Welcome to the aeon.wiki This page is under construction.","title":"Getting started"},{"location":"tutorial/getting-started/#welcome-to-the-aeonwiki","text":"This page is under construction.","title":"Welcome to the aeon.wiki"},{"location":"tutorial/getting-started/#_1","text":"","title":""},{"location":"tutorial/mining/","text":"From https://aeon.herominers.com/#how-to-mine-aeon. SRBminer-Multi v0.5.4+ (Windows, Linux, CPU, AMD) Method 1: Run guided_setup.bat file and answer questions: Configuration name: aeon-herominers Do you want to use multi algorithm mining? n or y (optional) Enter algorithm 0 name: k12 Address and port of mining pool: aeon.herominers.com:10651 Wallet address: YOUR_AEON_WALLET_ADDRESS Password: YOUR_WORKER_NAME Do you want to use your CPU for mining algorithm 0 ? n or y (optional) Do you want to enable logging? n or y (optional) Do you want to enable compute mode? y or n (optional) Method 2: Create aeon-herominers.bat file and copy / paste example below. setx GPU_MAX_HEAP_SIZE 100 setx GPU_MAX_USE_SYNC_OBJECTS 1 setx GPU_SINGLE_ALLOC_PERCENT 100 setx GPU_MAX_ALLOC_PERCENT 100 setx GPU_MAX_SINGLE_ALLOC_PERCENT 100 setx GPU_ENABLE_LARGE_ALLOCATION 100 setx GPU_MAX_WORKGROUP_SIZE 1024 @echo off cd %~dp0 cls SRBMiner-MULTI.exe --algorithm k12 --pool aeon.herominers.com:10651 --wallet YOUR_AEON_WALLET_ADDRESS --password YOUR_WORKER_NAME pause XMRig KangarooTwelve v1.0.0+ (Windows, Linux, CPU) Create aeon-herominers.cmd file and copy / paste example below. @echo off xmrig.exe --donate-level 1 -o aeon.herominers.com:10651 -u YOUR_AEON_WALLET_ADDRESS -p YOUR_WORKER_NAME -a k12 -k pause Vulkan XMR Miner v0.4.1+ (Windows, Linux, CPU, GPU) Create aeon-herominers.cmd file and copy / paste example below. Your crypto: 2 (Aeon v7/v8) Mining pool address (hostname/IP): aeon.herominers.com Mining pool port: 10651 Your address (with optional .something at the end): YOUR_AEON_WALLET_ADDRESS Password (or x if none): YOUR_WORKER_NAME Monitoring listen port (0 if no JSON/graphic console): 0 Answer other questions regarding your GPU cards and mining will start. xmr-node-proxy Example config.json \"pools\": [ { \"hostname\": \" aeon.herominers.com \", \"port\": 10651, \"ssl\": false, \"allowSelfSignedSSL\": false, \"share\": 100, \"username\": \" YOUR_AEON_WALLET_ADDRESS \", \"password\": \" YOUR_WORKER_NAME \", \"keepAlive\": true, \"algo\": \" k12 \", \"blob_type\": \" aeon \", \"default\": true } ],","title":"Mining"},{"location":"who-and-why/copyright/","text":"Copyright Copyright (c) 2014-2019, The Monero Project All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Parts of the project are originally copyright (c) 2012-2013 The Cryptonote developers Parts of the project are originally copyright (c) 2014 The Boolberry developers, distributed under the MIT licence: Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Copyright"},{"location":"who-and-why/copyright/#copyright","text":"Copyright (c) 2014-2019, The Monero Project All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Parts of the project are originally copyright (c) 2012-2013 The Cryptonote developers Parts of the project are originally copyright (c) 2014 The Boolberry developers, distributed under the MIT licence: Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Copyright"},{"location":"who-and-why/copyright/#_1","text":"","title":""},{"location":"who-and-why/sponsors/","text":"Sponsors Core development funding and/or some supporting services are also graciously provided by sponsors: There are also several mining pools that kindly donate a portion of their fees, a list of them can be found on our Bitcointalk post .","title":"Sponsors"},{"location":"who-and-why/sponsors/#sponsors","text":"Core development funding and/or some supporting services are also graciously provided by sponsors: There are also several mining pools that kindly donate a portion of their fees, a list of them can be found on our Bitcointalk post .","title":"Sponsors"},{"location":"who-and-why/sponsors/#_1","text":"","title":""},{"location":"who-and-why/thanks/","text":"Welcome to the aeon.wiki This page is under construction.","title":"Thanks"},{"location":"who-and-why/thanks/#welcome-to-the-aeonwiki","text":"This page is under construction.","title":"Welcome to the aeon.wiki"},{"location":"who-and-why/the-name/","text":"Welcome to the aeon.wiki This page is under construction.","title":"The name"},{"location":"who-and-why/the-name/#welcome-to-the-aeonwiki","text":"This page is under construction.","title":"Welcome to the aeon.wiki"}]}